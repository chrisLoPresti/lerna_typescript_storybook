"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyEventToOptions = keyEventToOptions;
exports.default = void 0;

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.array.filter");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.array.reduce");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

var _pick = _interopRequireDefault(require("lodash/pick"));

var _key_events = require("../../../libs/key_events");

var _actions = _interopRequireDefault(require("../../api/actions"));

var _defaultState = _interopRequireDefault(require("../defaultState"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var deprecationMessage = function deprecationMessage(oldName, newName) {
  return "The ".concat(oldName, " option has been renamed to ").concat(newName, " and will not be available in the next major Storybook release. Please update your config.");
};

function keyEventToOptions(currentOptions, event) {
  if (currentOptions.enableShortcuts) {
    switch (event) {
      case _key_events.features.FULLSCREEN:
        return {
          goFullScreen: !currentOptions.goFullScreen
        };

      case _key_events.features.ADDON_PANEL:
        return {
          showAddonPanel: !currentOptions.showAddonPanel
        };

      case _key_events.features.STORIES_PANEL:
        return {
          showStoriesPanel: !currentOptions.showStoriesPanel
        };

      case _key_events.features.SHOW_SEARCH:
        return {
          showSearchBox: true
        };

      case _key_events.features.ADDON_PANEL_IN_RIGHT:
        return {
          addonPanelInRight: !currentOptions.addonPanelInRight
        };

      default:
        return {};
    }
  }

  return {};
}

var renamedOptions = {
  showLeftPanel: 'showStoriesPanel',
  showDownPanel: 'showAddonPanel',
  downPanelInRight: 'addonPanelInRight'
};
var _default = {
  handleEvent: function handleEvent(context, event) {
    var clientStore = context.clientStore;

    switch (event) {
      case _key_events.features.NEXT_STORY:
        _actions.default.api.jumpToStory(context, 1);

        break;

      case _key_events.features.PREV_STORY:
        _actions.default.api.jumpToStory(context, -1);

        break;

      default:
        clientStore.update(function (state) {
          var newOptions = keyEventToOptions(state.shortcutOptions, event);

          var updatedOptions = _objectSpread({}, state.shortcutOptions, newOptions);

          return {
            shortcutOptions: updatedOptions
          };
        });
    }
  },
  setOptions: function setOptions(_ref, options) {
    var clientStore = _ref.clientStore;
    clientStore.update(function () {
      var updatedOptions = _objectSpread({}, _defaultState.default.shortcutOptions, (0, _pick.default)(options, Object.keys(_defaultState.default.shortcutOptions)));

      var withNewNames = Object.keys(renamedOptions).reduce(function (acc, oldName) {
        var newName = renamedOptions[oldName];

        if (oldName in options && !(newName in options)) {
          if (process.env.NODE_ENV !== 'production') {
            // eslint-disable-next-line no-console
            console.warn(deprecationMessage(oldName, newName));
          }

          return _objectSpread({}, acc, _defineProperty({}, newName, options[oldName]));
        }

        return acc;
      }, updatedOptions);
      return {
        shortcutOptions: withNewNames
      };
    });
  }
};
exports.default = _default;