"use strict";

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.map");

require("core-js/modules/es6.array.map");

var _stories_panel = require("./stories_panel");

describe('manager.ui.containers.stories_panel', function () {
  describe('mapper', function () {
    test('should give correct data', function () {
      var stories = [{
        kind: 'sk',
        stories: ['dd']
      }];
      var selectedKind = 'sk';
      var selectedStory = 'dd';
      var selectedHierarchy = ['sk'];
      var uiOptions = {
        name: 'foo',
        url: 'bar'
      };

      var selectStory = function selectStory() {
        return 'selectStory';
      };

      var setStoryFilter = function setStoryFilter() {
        return 'setStoryFilter';
      };

      var props = {};
      var env = {
        actions: function actions() {
          return {
            api: {
              selectStory: selectStory
            },
            ui: {
              setStoryFilter: setStoryFilter
            }
          };
        }
      };
      var state = {
        storyFilter: null,
        stories: stories,
        selectedKind: selectedKind,
        selectedStory: selectedStory,
        uiOptions: uiOptions
      };
      var result = (0, _stories_panel.mapper)(state, props, env);
      expect(result.storiesHierarchies[0].map).toEqual(new Map([['sk', {
        kind: 'sk',
        name: 'sk',
        namespaces: ['sk'],
        isNamespace: true,
        highlight: null,
        map: new Map(),
        stories: [{
          highlight: null,
          name: 'dd'
        }]
      }]]));
      expect(result.selectedKind).toBe(selectedKind);
      expect(result.selectedHierarchy).toEqual(selectedHierarchy);
      expect(result.selectedStory).toBe(selectedStory);
      expect(result.storyFilter).toBe(null);
      expect(result.onSelectStory).toBe(selectStory);
      expect(result.onStoryFilter).toBe(setStoryFilter);
    });
    test('should filter stories according to the given filter', function () {
      var stories = [{
        kind: 'pk',
        stories: ['dd']
      }, {
        kind: 'ss',
        stories: ['dd']
      }, {
        kind: 'pkr',
        stories: ['dd']
      }];
      var selectedKind = 'pk';
      var selectedStory = 'dd';
      var uiOptions = {
        name: 'foo',
        url: 'bar'
      };

      var selectStory = function selectStory() {
        return 'selectStory';
      };

      var toggleShortcutsHelp = function toggleShortcutsHelp() {
        return 'toggleShortcutsHelp';
      };

      var setStoryFilter = function setStoryFilter() {
        return 'setStoryFilter';
      };

      var props = {};
      var env = {
        actions: function actions() {
          return {
            api: {
              selectStory: selectStory
            },
            ui: {
              toggleShortcutsHelp: toggleShortcutsHelp,
              setStoryFilter: setStoryFilter
            }
          };
        }
      };
      var state = {
        storyFilter: 'ss',
        stories: stories,
        selectedKind: selectedKind,
        selectedStory: selectedStory,
        uiOptions: uiOptions
      };
      var result = (0, _stories_panel.mapper)(state, props, env);
      expect(result.storiesHierarchies[0].map).toEqual(new Map([['pk', // selected kind is always there. That's why this is here.
      {
        kind: 'pk',
        name: 'pk',
        namespaces: ['pk'],
        isNamespace: true,
        highlight: null,
        map: new Map(),
        stories: [{
          highlight: null,
          name: 'dd'
        }]
      }], ['ss', {
        kind: 'ss',
        name: 'ss',
        namespaces: ['ss'],
        isNamespace: true,
        highlight: [[0, 1]],
        map: new Map(),
        stories: [{
          highlight: null,
          name: 'dd'
        }]
      }]]));
    });
    test('should filter and sort stories according to the given filter', function () {
      var stories = [{
        kind: 'ss',
        stories: ['dd']
      }, {
        kind: 'pk',
        stories: ['dd']
      }, {
        kind: 'pkr',
        stories: ['dd']
      }];
      var selectedKind = 'pk';
      var selectedStory = 'dd';
      var uiOptions = {
        name: 'foo',
        url: 'bar',
        sortStoriesByKind: true
      };

      var selectStory = function selectStory() {
        return 'selectStory';
      };

      var toggleShortcutsHelp = function toggleShortcutsHelp() {
        return 'toggleShortcutsHelp';
      };

      var setStoryFilter = function setStoryFilter() {
        return 'setStoryFilter';
      };

      var props = {};
      var env = {
        actions: function actions() {
          return {
            api: {
              selectStory: selectStory
            },
            ui: {
              toggleShortcutsHelp: toggleShortcutsHelp,
              setStoryFilter: setStoryFilter
            }
          };
        }
      };
      var state = {
        storyFilter: 'ss',
        stories: stories,
        selectedKind: selectedKind,
        selectedStory: selectedStory,
        uiOptions: uiOptions
      };
      var result = (0, _stories_panel.mapper)(state, props, env);
      expect(result.storiesHierarchies[0].map).toEqual(new Map([// selected kind is always there. That's why this is here.
      ['pk', {
        kind: 'pk',
        stories: [{
          highlight: null,
          name: 'dd'
        }],
        isNamespace: true,
        highlight: null,
        map: new Map(),
        name: 'pk',
        namespaces: ['pk']
      }], ['ss', {
        kind: 'ss',
        stories: [{
          highlight: null,
          name: 'dd'
        }],
        isNamespace: true,
        highlight: [[0, 1]],
        map: new Map(),
        name: 'ss',
        namespaces: ['ss']
      }]]));
    });
  });
});