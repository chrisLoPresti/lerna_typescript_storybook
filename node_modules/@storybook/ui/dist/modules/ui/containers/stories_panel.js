"use strict";

require("core-js/modules/es6.object.define-property");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.mapper = void 0;

require("core-js/modules/es6.function.name");

var _stories_panel = _interopRequireDefault(require("../components/stories_panel"));

var filters = _interopRequireWildcard(require("../libs/filters"));

var _gen_podda_loader = _interopRequireDefault(require("../libs/gen_podda_loader"));

var _compose = _interopRequireDefault(require("../../../compose"));

var _hierarchy = require("../libs/hierarchy");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapper = function mapper(state, props, _ref) {
  var actions = _ref.actions;
  var actionMap = actions();
  var stories = state.stories,
      selectedKind = state.selectedKind,
      selectedStory = state.selectedStory,
      uiOptions = state.uiOptions,
      storyFilter = state.storyFilter,
      shortcutOptions = state.shortcutOptions,
      isMobileDevice = state.isMobileDevice;
  var sortStoriesByKind = uiOptions.sortStoriesByKind,
      hierarchySeparator = uiOptions.hierarchySeparator,
      hierarchyRootSeparator = uiOptions.hierarchyRootSeparator,
      sidebarAnimations = uiOptions.sidebarAnimations,
      name = uiOptions.name,
      url = uiOptions.url;
  var preparedStories = (0, _hierarchy.prepareStoriesForHierarchy)(stories, hierarchySeparator, hierarchyRootSeparator);
  var filteredStories = filters.storyFilter(preparedStories, storyFilter, selectedKind, selectedStory, sortStoriesByKind);
  var storiesHierarchies = (0, _hierarchy.createHierarchies)(filteredStories);

  var _resolveStoryHierarch = (0, _hierarchy.resolveStoryHierarchyRoots)(selectedKind, hierarchyRootSeparator),
      storyName = _resolveStoryHierarch.storyName;

  var selectedHierarchy = (0, _hierarchy.resolveStoryHierarchy)(storyName, hierarchySeparator);
  return {
    storiesHierarchies: storiesHierarchies,
    selectedKind: selectedKind,
    selectedStory: selectedStory,
    selectedHierarchy: selectedHierarchy,
    onSelectStory: actionMap.api.selectStory,
    shortcutOptions: shortcutOptions,
    storyFilter: storyFilter,
    onStoryFilter: actionMap.ui.setStoryFilter,
    openShortcutsHelp: actionMap.ui.toggleShortcutsHelp,
    sidebarAnimations: sidebarAnimations,
    isMobileDevice: isMobileDevice,
    name: name,
    url: url
  };
};

exports.mapper = mapper;

var _default = (0, _compose.default)((0, _gen_podda_loader.default)(mapper), {
  withRef: false
})(_stories_panel.default);

exports.default = _default;