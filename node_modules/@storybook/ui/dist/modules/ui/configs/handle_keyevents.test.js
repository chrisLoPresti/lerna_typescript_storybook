"use strict";

var _global = require("global");

var _keycode = _interopRequireDefault(require("keycode"));

var _handle_keyevents = _interopRequireDefault(require("./handle_keyevents"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('manager.ui.config.handle_keyevents', function () {
  test('should call the correct action', function () {
    var actions = {
      shortcuts: {
        handleEvent: jest.fn()
      }
    };
    var originalOnkeydown = _global.window.onkeydown;
    (0, _handle_keyevents.default)(actions);
    var e = {
      ctrlKey: true,
      shiftKey: true,
      keyCode: (0, _keycode.default)('F'),
      preventDefault: function preventDefault() {},
      target: {
        tagName: 'DIV',
        getAttribute: function getAttribute() {
          return null;
        }
      }
    };

    _global.window.onkeydown(e);

    expect(actions.shortcuts.handleEvent).toHaveBeenCalled();
    _global.window.onkeydown = originalOnkeydown;
  });
  test('should not call any actions if the event target is an input', function () {
    var actions = {
      shortcuts: {
        handleEvent: jest.fn()
      }
    };
    var originalOnkeydown = _global.window.onkeydown;
    (0, _handle_keyevents.default)(actions);
    var e = {
      ctrlKey: true,
      shiftKey: true,
      keyCode: (0, _keycode.default)('F'),
      preventDefault: function preventDefault() {},
      target: {
        tagName: 'INPUT',
        getAttribute: function getAttribute() {
          return null;
        }
      }
    };

    _global.window.onkeydown(e);

    expect(actions.shortcuts.handleEvent).not.toHaveBeenCalled();
    _global.window.onkeydown = originalOnkeydown;
  });
  test('should not call any actions if the event target has contenteditable enabled', function () {
    var actions = {
      shortcuts: {
        handleEvent: jest.fn()
      }
    };
    var originalOnkeydown = _global.window.onkeydown;
    (0, _handle_keyevents.default)(actions);
    var e = {
      ctrlKey: true,
      shiftKey: true,
      keyCode: (0, _keycode.default)('F'),
      preventDefault: function preventDefault() {},
      target: {
        tagName: 'DIV',
        getAttribute: function getAttribute(attr) {
          return /contenteditable/i.test(attr) ? '' : null;
        }
      }
    };

    _global.window.onkeydown(e);

    expect(actions.shortcuts.handleEvent).not.toHaveBeenCalled();
    _global.window.onkeydown = originalOnkeydown;
  });
});