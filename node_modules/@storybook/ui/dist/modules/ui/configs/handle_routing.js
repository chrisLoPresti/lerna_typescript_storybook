"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUrlState = getUrlState;
exports.changeUrl = changeUrl;
exports.updateStore = updateStore;
exports.handleInitialUrl = handleInitialUrl;
exports.default = _default;
exports.config = void 0;

require("core-js/modules/es6.array.index-of");

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.array.filter");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.regexp.search");

require("core-js/modules/es6.number.constructor");

var _global = require("global");

var _qs = _interopRequireDefault(require("qs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var config = {
  insidePopState: false
};
exports.config = config;

function getUrlState(data) {
  var selectedKind = data.selectedKind,
      selectedStory = data.selectedStory,
      customQueryParams = data.customQueryParams;
  var _data$shortcutOptions = data.shortcutOptions,
      full = _data$shortcutOptions.goFullScreen,
      addons = _data$shortcutOptions.showAddonPanel,
      stories = _data$shortcutOptions.showStoriesPanel,
      panelRight = _data$shortcutOptions.addonPanelInRight;
  var addonPanel = data.selectedAddonPanel;

  var urlObj = _objectSpread({
    selectedKind: selectedKind,
    selectedStory: selectedStory,
    full: Number(full),
    addons: Number(addons),
    stories: Number(stories),
    panelRight: Number(panelRight),
    addonPanel: addonPanel
  }, customQueryParams);

  var url = "?".concat(_qs.default.stringify(urlObj));
  return _objectSpread({}, urlObj, {
    full: full,
    addons: addons,
    stories: stories,
    panelRight: panelRight,
    url: url
  });
}

function changeUrl(clientStore, usePush) {
  // Do not change the URL if we are inside a popState event.
  if (config.insidePopState) return;
  var data = clientStore.getAll();
  if (!data.selectedKind) return;
  var state = getUrlState(data);

  try {
    _global.history[usePush ? 'pushState' : 'replaceState'](state, '', state.url);
  } catch (e) {// do nothing
  }
}

function updateStore(queryParams, actions) {
  var selectedKind = queryParams.selectedKind,
      selectedStory = queryParams.selectedStory,
      _queryParams$full = queryParams.full,
      full = _queryParams$full === void 0 ? 0 : _queryParams$full,
      _queryParams$down = queryParams.down,
      down = _queryParams$down === void 0 ? 1 : _queryParams$down,
      _queryParams$addons = queryParams.addons,
      addons = _queryParams$addons === void 0 ? down : _queryParams$addons,
      _queryParams$left = queryParams.left,
      left = _queryParams$left === void 0 ? 1 : _queryParams$left,
      _queryParams$stories = queryParams.stories,
      stories = _queryParams$stories === void 0 ? left : _queryParams$stories,
      _queryParams$panelRig = queryParams.panelRight,
      panelRight = _queryParams$panelRig === void 0 ? 0 : _queryParams$panelRig,
      downPanel = queryParams.downPanel,
      _queryParams$addonPan = queryParams.addonPanel,
      addonPanel = _queryParams$addonPan === void 0 ? downPanel : _queryParams$addonPan,
      customQueryParams = _objectWithoutProperties(queryParams, ["selectedKind", "selectedStory", "full", "down", "addons", "left", "stories", "panelRight", "downPanel", "addonPanel"]);

  if (selectedKind) {
    actions.api.selectStory(selectedKind, selectedStory);
  }

  actions.shortcuts.setOptions({
    goFullScreen: Boolean(Number(full)),
    showAddonPanel: Boolean(Number(addons)),
    showStoriesPanel: Boolean(Number(stories)),
    addonPanelInRight: Boolean(Number(panelRight))
  });

  if (addonPanel) {
    actions.ui.selectAddonPanel(addonPanel);
  }

  actions.api.setQueryParams(customQueryParams);
}

function handleInitialUrl(actions, l) {
  var queryString = l.search.substring(1);
  if (!queryString || queryString === '') return;

  var parsedQs = _qs.default.parse(queryString);

  updateStore(parsedQs, actions);
}

function _default(_ref, actions) {
  var clientStore = _ref.clientStore;
  // handle initial URL
  handleInitialUrl(actions, _global.location);
  var data = clientStore.getAll();
  var prevKind = data.selectedKind;
  var prevStory = data.selectedStory; // subscribe to clientStore and change the URL

  clientStore.subscribe(function () {
    var _clientStore$getAll = clientStore.getAll(),
        selectedKind = _clientStore$getAll.selectedKind,
        selectedStory = _clientStore$getAll.selectedStory; // use pushState only when a new story is selected


    var usePush = prevKind != null && prevStory != null && (selectedKind !== prevKind || selectedStory !== prevStory);
    changeUrl(clientStore, usePush);
    prevKind = selectedKind;
    prevStory = selectedStory;
  });
  changeUrl(clientStore); // handle back button

  _global.window.onpopstate = function () {
    config.insidePopState = true;
    handleInitialUrl(actions, _global.location);
    config.insidePopState = false;
  };
}