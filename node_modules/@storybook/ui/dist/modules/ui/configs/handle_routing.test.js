"use strict";

require("core-js/modules/es6.object.assign");

var _global = require("global");

var _handle_routing = require("./handle_routing");

jest.mock('global', function () {
  return {
    window: global,
    location: global.location,
    history: Object.assign({}, global.history, {
      replaceState: jest.fn()
    })
  };
});
describe('manager.ui.config.handle_routing', function () {
  describe('changeUrl', function () {
    it('should not do anything if insidePopState=true', function () {
      _handle_routing.config.insidePopState = true; // This should throws an error if insidePopState = false

      (0, _handle_routing.changeUrl)(null);
      _handle_routing.config.insidePopState = false;
    });
    it('should put the correct URL and state to replaceState', function () {
      var state = {
        selectedKind: 'kk',
        selectedStory: 'ss',
        shortcutOptions: {
          goFullScreen: false,
          showAddonPanel: true,
          showStoriesPanel: true,
          addonPanelInRight: true
        },
        selectedAddonPanel: 'pp',
        customQueryParams: {
          customText: 'test'
        }
      };
      var clientStore = {
        getAll: function getAll() {
          return state;
        }
      };
      var url = '?selectedKind=kk&selectedStory=ss&full=0&addons=1&stories=1&panelRight=1&addonPanel=pp&customText=test';
      var d = {
        url: url,
        selectedKind: 'kk',
        selectedStory: 'ss',
        full: false,
        addons: true,
        stories: true,
        panelRight: true,
        addonPanel: 'pp',
        customText: 'test'
      };
      (0, _handle_routing.changeUrl)(clientStore);
      expect(_global.history.replaceState).toHaveBeenCalledWith(d, '', url);
    });
  });
  describe('handleInitialUrl', function () {
    it('should call the correct action according to URL', function () {
      var actions = {
        api: {
          selectStory: jest.fn(),
          setQueryParams: jest.fn()
        },
        shortcuts: {
          setOptions: jest.fn()
        },
        ui: {
          selectAddonPanel: jest.fn()
        }
      };
      var url = '?selectedKind=kk&selectedStory=ss&full=1&addons=0&stories=0&panelRight=0&addonPanel=test&customText=teststring';
      var location = {
        search: url
      };
      (0, _handle_routing.handleInitialUrl)(actions, location);
      expect(actions.api.selectStory).toHaveBeenCalled();
      expect(actions.shortcuts.setOptions).toHaveBeenCalled();
      expect(actions.ui.selectAddonPanel).toHaveBeenCalled();
      expect(actions.shortcuts.setOptions).toHaveBeenCalledWith({
        goFullScreen: true,
        showAddonPanel: false,
        showStoriesPanel: false,
        addonPanelInRight: false
      });
      expect(actions.ui.selectAddonPanel).toHaveBeenCalledWith('test');
      expect(actions.api.setQueryParams).toHaveBeenCalledWith({
        customText: 'teststring'
      });
    });
    test('should handle URLs with outdated param names', function () {
      var actions = {
        api: {
          selectStory: jest.fn(),
          setQueryParams: jest.fn()
        },
        shortcuts: {
          setOptions: jest.fn()
        },
        ui: {
          selectAddonPanel: jest.fn()
        }
      };
      var url = '?down=0&left=0&downPanel=test';
      var location = {
        search: url
      };
      (0, _handle_routing.handleInitialUrl)(actions, location);
      expect(actions.shortcuts.setOptions).toHaveBeenCalled();
      expect(actions.shortcuts.setOptions).toHaveBeenCalledWith({
        goFullScreen: false,
        showAddonPanel: false,
        showStoriesPanel: false,
        addonPanelInRight: false
      });
      expect(actions.ui.selectAddonPanel).toHaveBeenCalledWith('test');
    });
  });
});