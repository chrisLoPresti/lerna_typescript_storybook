"use strict";

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es6.date.to-string");

var _podda = _interopRequireDefault(require("@storybook/podda"));

var _gen_podda_loader = _interopRequireDefault(require("./gen_podda_loader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('manager.ui.libs.gen_podda_loader', function () {
  describe('mapper', function () {
    it('should map the podda store state', function () {
      var aa = 10;
      var bb = 20;
      var cc = 40;

      var mapper = function mapper(state) {
        return {
          aa: state.aa,
          bb: state.bb
        };
      };

      var clientStore = new _podda.default({
        aa: aa,
        bb: bb,
        cc: cc
      });
      var loader = (0, _gen_podda_loader.default)(mapper);
      var onData = jest.fn();
      loader({}, onData, {
        context: function context() {
          return {
            clientStore: clientStore
          };
        }
      });
      expect(onData).toHaveBeenCalledWith(null, {
        aa: aa,
        bb: bb
      });
    });
    it('should get props', function () {
      var aa = 10;
      var bb = 20;
      var cc = 40;

      var mapper = function mapper(state, props) {
        return {
          aa: props.aa,
          bb: props.bb
        };
      };

      var clientStore = new _podda.default();
      var loader = (0, _gen_podda_loader.default)(mapper);
      var onData = jest.fn();
      loader({
        aa: aa,
        bb: bb,
        cc: cc
      }, onData, {
        context: function context() {
          return {
            clientStore: clientStore
          };
        }
      });
      expect(onData).toHaveBeenCalledWith(null, {
        aa: aa,
        bb: bb
      });
    });
    it('should get env', function () {
      var aa = 10;
      var bb = 20;
      var cc = 40;

      var mapper = function mapper(state, props, env) {
        return {
          aa: env.aa,
          bb: env.bb
        };
      };

      var clientStore = new _podda.default();
      var loader = (0, _gen_podda_loader.default)(mapper);
      var onData = jest.fn();
      loader({}, onData, {
        context: function context() {
          return {
            clientStore: clientStore
          };
        },
        aa: aa,
        bb: bb,
        cc: cc
      });
      expect(onData).toHaveBeenCalledWith(null, {
        aa: aa,
        bb: bb
      });
    });
  });
  describe('core', function () {
    it('should handle errors in the mapper', function () {
      var mapper = function mapper() {
        throw new Error('this is the error');
      };

      var clientStore = new _podda.default();
      var loader = (0, _gen_podda_loader.default)(mapper);
      var onData = jest.fn();
      loader({}, onData, {
        context: function context() {
          return {
            clientStore: clientStore
          };
        }
      });
      expect(onData.mock.calls[0].toString()).toMatch(/this is the error/);
    });
    it('should run when the podda store changed', function () {
      var aa = 10;
      var bb = 20;
      var cc = 40;

      var mapper = function mapper(state) {
        return {
          aa: state.aa,
          bb: state.bb
        };
      };

      var clientStore = new _podda.default({
        aa: aa,
        bb: bb,
        cc: cc
      });
      var loader = (0, _gen_podda_loader.default)(mapper);
      var onData = jest.fn();
      loader({
        aa: aa,
        bb: bb,
        cc: cc
      }, onData, {
        context: function context() {
          return {
            clientStore: clientStore
          };
        }
      });
      clientStore.set('aa', 1000);
      expect(onData).toHaveBeenCalledWith(null, {
        aa: 1000,
        bb: bb
      });
    });
    it('should not run when podda subscription stopped', function () {
      var aa = 10;
      var bb = 20;
      var cc = 40;

      var mapper = function mapper(state) {
        return {
          aa: state.aa,
          bb: state.bb
        };
      };

      var clientStore = new _podda.default({
        aa: aa,
        bb: bb,
        cc: cc
      });
      var loader = (0, _gen_podda_loader.default)(mapper);
      var onData = jest.fn();
      var stop = loader({
        aa: aa,
        bb: bb,
        cc: cc
      }, onData, {
        context: function context() {
          return {
            clientStore: clientStore
          };
        }
      });
      stop();
      clientStore.set('aa', 1000);
      expect(onData).toHaveBeenCalled();
    });
  });
});