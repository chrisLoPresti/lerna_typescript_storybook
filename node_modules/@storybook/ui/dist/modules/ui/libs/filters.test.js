"use strict";

require("core-js/modules/es6.array.sort");

var _filters = require("./filters");

describe('manager.ui.libs.filters', function () {
  describe('storyFilter', function () {
    test('should return null if there are no stories', function () {
      var res = (0, _filters.storyFilter)();
      expect(res).toBe(null);
    });
    test('should original stories if there is no filter', function () {
      var stories = [{
        kind: ['aa'],
        namespaces: ['aa'],
        stories: ['bb'],
        rootName: ''
      }];
      var res = (0, _filters.storyFilter)(stories);
      expect(res).toBe(stories);
    });
    test('should always return the selectedKind', function () {
      var stories = [{
        kind: 'aa',
        namespaces: ['aa'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'bb',
        namespaces: ['bb'],
        stories: ['bb'],
        rootName: ''
      }];
      var selectedKind = 'bb';
      var selectedStory = 'bb';
      var res = (0, _filters.storyFilter)(stories, 'no-match', selectedKind, selectedStory);
      expect(res).toMatchObject([stories[1]]);
    });
    test('should always return the selectedKind with the single selectedStory', function () {
      var stories = [{
        kind: 'aa',
        namespaces: ['aa'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'bb',
        namespaces: ['bb'],
        stories: ['bb', 'cc', 'dd'],
        rootName: ''
      }];
      var selectedKind = 'bb';
      var selectedStory = 'cc';
      var res = (0, _filters.storyFilter)(stories, 'no-match', selectedKind, selectedStory);
      expect(res[0].stories).toEqual(['cc']);
    });
    test('should filter kinds correctly', function () {
      var stories = [{
        kind: 'aa',
        namespaces: ['aa'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'bb',
        namespaces: ['bb'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'ss',
        namespaces: ['ss'],
        stories: ['bb'],
        rootName: ''
      }];
      var selectedKind = 'bb';
      var selectedStory = 'bb';
      var res = (0, _filters.storyFilter)(stories, 'aa', selectedKind, selectedStory);
      expect(res).toMatchObject([stories[0], stories[1]]);
    });
    test('should not sort stories by kind', function () {
      var stories = [{
        kind: 'ss',
        namespaces: ['ss'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'aa',
        namespaces: ['aa'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'bb',
        namespaces: ['bb'],
        stories: ['bb'],
        rootName: ''
      }];
      var res = (0, _filters.storyFilter)(stories);
      expect(res).toBe(stories);
    });
    test('should sort stories by kind', function () {
      var stories = [{
        kind: 'ss',
        namespaces: ['ss'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'aa',
        namespaces: ['aa'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'bb',
        namespaces: ['bb'],
        stories: ['bb'],
        rootName: ''
      }];
      var res = (0, _filters.storyFilter)(stories, null, null, null, true);
      expect(res).toEqual([stories[1], stories[2], stories[0]]);
    });
    test('should sort nested stories', function () {
      var unsorted = ['bb', 'aa'];
      var stories = [{
        kind: 'ss',
        namespaces: ['ss'],
        stories: unsorted,
        rootName: ''
      }, {
        kind: 'aa',
        namespaces: ['aa'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'bb',
        namespaces: ['bb'],
        stories: ['bb'],
        rootName: ''
      }];
      var res = (0, _filters.storyFilter)(stories, null, null, null, true);
      expect(res[2].stories).not.toEqual(unsorted);
      expect(res[2].stories).toEqual(unsorted.concat().sort());
    });
    test('should filter on story level', function () {
      var stories = [{
        kind: 'aa',
        namespaces: ['aa'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'cc',
        namespaces: ['cc'],
        stories: ['dd'],
        rootName: ''
      }, {
        kind: 'ee',
        namespaces: ['ee'],
        stories: ['ff'],
        rootName: ''
      }];
      var selectedKind = 'aa';
      var selectedStory = 'bb';
      var res = (0, _filters.storyFilter)(stories, 'ff', selectedKind, selectedStory);
      expect(res).toMatchObject([stories[0], stories[2]]);
    });
    test('should filter out unmatched stories at lowest level', function () {
      var stories = [{
        kind: 'aa',
        namespaces: ['aa'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'cc',
        namespaces: ['cc'],
        stories: ['dd'],
        rootName: ''
      }, {
        kind: 'ee',
        namespaces: ['ee'],
        stories: ['ff', 'gg'],
        rootName: ''
      }];
      var selectedKind = 'aa';
      var selectedStory = 'bb';
      var res = (0, _filters.storyFilter)(stories, 'ff', selectedKind, selectedStory);
      expect(res).toMatchObject([stories[0], {
        kind: 'ee',
        stories: ['ff'],
        rootName: ''
      }]);
    });
    test('should be case insensitive at tree level', function () {
      var stories = [{
        kind: 'Aa',
        namespaces: ['aA'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'cc',
        namespaces: ['cc'],
        stories: ['dd'],
        rootName: ''
      }];
      var selectedKind = 'aA';
      var res = (0, _filters.storyFilter)(stories, 'aa', selectedKind);
      expect(res).toMatchObject([stories[0]]);
    });
    test('should be case insensitive at story level', function () {
      var stories = [{
        kind: 'aa',
        namespaces: ['aa'],
        stories: ['bb'],
        rootName: ''
      }, {
        kind: 'cc',
        namespaces: ['cc'],
        stories: ['dd', 'eE'],
        rootName: ''
      }];
      var selectedKind = 'aa';
      var selectedStory = 'bb';
      var res = (0, _filters.storyFilter)(stories, 'ee', selectedKind, selectedStory);
      expect(res).toMatchObject([stories[0], {
        kind: 'cc',
        stories: ['eE'],
        rootName: ''
      }]);
    });
  });
});