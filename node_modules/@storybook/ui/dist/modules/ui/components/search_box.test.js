"use strict";

require("core-js/modules/es6.object.assign");

require("core-js/modules/es6.string.starts-with");

require("core-js/modules/es6.array.find");

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _reactModal = _interopRequireDefault(require("react-modal"));

var _reactFuzzy = _interopRequireDefault(require("react-fuzzy"));

var _search_box = require("./search_box");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var setup = function setup() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaultProps = {
    showSearchBox: false,
    onSelectStory: function onSelectStory() {
      return undefined;
    },
    onClose: function onClose() {
      return undefined;
    }
  };
  return {
    wrap: (0, _enzyme.shallow)(_react.default.createElement(_search_box.SearchBox, _extends({}, defaultProps, props, {
      theme: {}
    })))
  };
};

describe('manager.ui.components.search_box', function () {
  describe('render', function () {
    test('should render FuzzySearch inside ReactModal', function () {
      var _setup = setup({
        showSearchBox: true
      }),
          wrap = _setup.wrap;

      var modal = wrap.find(_reactModal.default);
      expect(modal).toExist();
      expect(modal).toHaveProp('isOpen', true);
      expect(modal).toHaveProp('contentLabel', 'Search');
      var search = modal.find(_reactFuzzy.default);
      expect(search).toExist();
      expect(search).toHaveProp('keys', ['value', 'type']);
    });
    test('should format stories', function () {
      var stories = [{
        kind: 'a',
        stories: ['b', 'c']
      }];

      var _setup2 = setup({
        stories: stories
      }),
          wrap = _setup2.wrap;

      var search = wrap.find(_reactFuzzy.default);
      var expectedList = [{
        type: 'kind',
        value: 'a',
        id: 1
      }, {
        type: 'story',
        value: 'b',
        id: 2,
        kind: 'a'
      }, {
        type: 'story',
        value: 'c',
        id: 3,
        kind: 'a'
      }];
      expect(search).toHaveProp('list', expectedList);
    });
  });
  describe('events', function () {
    test('should call the onClose prop when modal requests it', function () {
      var onClose = jest.fn();

      var _setup3 = setup({
        onClose: onClose
      }),
          wrap = _setup3.wrap;

      var modal = wrap.find(_reactModal.default);
      modal.simulate('requestClose');
      expect(onClose).toHaveBeenCalled();
    });
    test('should handle selecting a kind', function () {
      var onSelectStory = jest.fn();
      var onClose = jest.fn();

      var _setup4 = setup({
        onSelectStory: onSelectStory,
        onClose: onClose
      }),
          wrap = _setup4.wrap;

      var modal = wrap.find(_reactFuzzy.default);
      modal.simulate('select', {
        type: 'kind',
        value: 'a'
      });
      expect(onSelectStory).toHaveBeenCalledWith('a', null);
      expect(onClose).toHaveBeenCalledWith();
    });
    test('should handle selecting a story', function () {
      var onSelectStory = jest.fn();
      var onClose = jest.fn();

      var _setup5 = setup({
        onSelectStory: onSelectStory,
        onClose: onClose
      }),
          wrap = _setup5.wrap;

      var modal = wrap.find(_reactFuzzy.default);
      modal.simulate('select', {
        type: 'story',
        value: 'a',
        kind: 'b'
      });
      expect(onSelectStory).toHaveBeenCalledWith('b', 'a');
      expect(onClose).toHaveBeenCalled();
    });
    test('should handle selecting a story with click', function () {
      var stories = [{
        kind: 'a',
        stories: ['b', 'c']
      }];
      var onSelectStory = jest.fn();
      var onClose = jest.fn();

      var _setup6 = setup({
        onSelectStory: onSelectStory,
        onClose: onClose,
        stories: stories,
        showSearchBox: true
      }),
          wrap = _setup6.wrap;

      var modal = wrap.find(_reactFuzzy.default).dive();
      modal.find('input').simulate('change', {
        target: {
          value: 'b'
        }
      });
      var option = modal.findWhere(function (el) {
        return el.key() && el.key().startsWith('b_');
      });
      option.simulate('click');
      expect(onSelectStory).toHaveBeenCalledWith('a', 'b');
      expect(onClose).toHaveBeenCalled();
    });
  });
});