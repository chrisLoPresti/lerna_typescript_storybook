"use strict";

require("core-js/modules/es6.array.find");

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _index = _interopRequireDefault(require("./index"));

var _compose = require("../../../../../compose");

var _hierarchy = require("../../../libs/hierarchy");

var _filters = require("../../../libs/filters");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var leftClick = {
  button: 0
};
describe('manager.ui.components.stories_panel.stories_tree', function () {
  beforeEach(function () {
    return (0, _compose.setContext)({
      clientStore: {
        getAll: function getAll() {
          return {
            shortcutOptions: {}
          };
        },
        subscribe: function subscribe() {}
      }
    });
  });
  afterEach(function () {
    return (0, _compose.setContext)(null);
  });
  var data = (0, _hierarchy.createHierarchies)([{
    kind: 'a',
    name: 'a',
    namespaces: ['a'],
    stories: ['a1', 'a2']
  }, {
    kind: 'b',
    name: 'b',
    namespaces: ['b'],
    stories: ['b1', 'b2']
  }])[0];
  var initialData = [{
    kind: 'some.name.item1',
    stories: ['a1', 'a2']
  }, {
    kind: 'another.space.20',
    stories: ['b1', 'b2']
  }];
  var dataWithoutSeparator = (0, _hierarchy.createHierarchies)((0, _hierarchy.prepareStoriesForHierarchy)(initialData))[0];
  var dataWithSeparator = (0, _hierarchy.createHierarchies)((0, _hierarchy.prepareStoriesForHierarchy)(initialData, '\\.'))[0];
  describe('render', function () {
    test('should render stories - empty', function () {
      var wrap = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
        storiesHierarchy: (0, _hierarchy.createHierarchyRoot)(),
        selectedKind: "",
        selectedStory: "",
        selectedHierarchy: [],
        sidebarAnimations: false
      }));
      var list = wrap.find('div').first().children('div').last();
      expect(list.text()).toBe('');
    });
    test('should render stories', function () {
      var wrap = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
        storiesHierarchy: data,
        selectedKind: "b",
        selectedStory: "b2",
        selectedHierarchy: ['b'],
        sidebarAnimations: false
      }));
      var output = wrap.html();
      expect(output).toMatch(/b/);
      expect(output).toMatch(/b2/);
    });
    test('should render stories with hierarchy - hierarchySeparator is defined', function () {
      var wrap = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
        storiesHierarchy: dataWithSeparator,
        selectedKind: "another.space.20",
        selectedStory: "b2",
        selectedHierarchy: ['another', 'space', '20'],
        sidebarAnimations: false
      }));
      var output = wrap.html();
      expect(output).toMatch(/some/);
      expect(output).not.toMatch(/>name</);
      expect(output).not.toMatch(/item1/);
      expect(output).not.toMatch(/a1/);
      expect(output).not.toMatch(/a2/);
      expect(output).toMatch(/another/);
      expect(output).toMatch(/space/);
      expect(output).toMatch(/20/);
      expect(output).toMatch(/b1/);
      expect(output).toMatch(/b2/);
    });
    test('should render stories without hierarchy - hierarchySeparator is not defined', function () {
      var wrap = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
        storiesHierarchy: dataWithoutSeparator,
        selectedKind: "another.space.20",
        selectedStory: "b2",
        selectedHierarchy: ['another.space.20'],
        sidebarAnimations: false
      }));
      var output = wrap.html();
      expect(output).toMatch(/some.name.item1/);
      expect(output).not.toMatch(/a1/);
      expect(output).not.toMatch(/a2/);
      expect(output).toMatch(/another.space.20/);
      expect(output).toMatch(/b1/);
      expect(output).toMatch(/b2/);
    });
    test('should render stories with initially selected nodes according to the selectedHierarchy', function () {
      var wrap = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
        storiesHierarchy: dataWithSeparator,
        selectedKind: "another.space.20",
        selectedStory: "b2",
        selectedHierarchy: ['another', 'space', '20'],
        sidebarAnimations: false
      }));

      var _wrap$state = wrap.state(),
          nodes = _wrap$state.nodes;

      expect(nodes).toEqual({
        'another@namespace': true,
        'another@space@namespace': true,
        'another@space@20@namespace': true
      });
    });
    test('should contain state with all selected nodes after clicking on the nodes', function () {
      var wrap = (0, _enzyme.mount)(_react.default.createElement(_index.default, {
        storiesHierarchy: dataWithSeparator,
        selectedKind: "another.space.20",
        selectedStory: "b2",
        selectedHierarchy: ['another', 'space', '20'],
        sidebarAnimations: false
      }));
      var kind = wrap.find('[data-name="some"]').first();
      kind.simulate('click', leftClick);

      var _wrap$state2 = wrap.state(),
          nodes = _wrap$state2.nodes;

      expect(nodes).toEqual({
        'another@namespace': true,
        'another@space@namespace': true,
        'another@space@20@namespace': true,
        'some@namespace': true
      });
    });
    test('should recalculate selected nodes after selectedHierarchy changes', function () {
      var wrap = (0, _enzyme.mount)(_react.default.createElement(_index.default, {
        storiesHierarchy: dataWithSeparator,
        selectedKind: "another.space.20",
        selectedStory: "b2",
        selectedHierarchy: [],
        sidebarAnimations: false
      }));
      wrap.setProps({
        selectedHierarchy: ['another', 'space', '20']
      });

      var _wrap$state3 = wrap.state(),
          nodes = _wrap$state3.nodes;

      expect(nodes).toEqual({
        'another@namespace': true,
        'another@space@namespace': true,
        'another@space@20@namespace': true
      });
    });
    test('should add selected nodes to the state after selectedHierarchy changes with a new value', function () {
      var wrap = (0, _enzyme.mount)(_react.default.createElement(_index.default, {
        storiesHierarchy: dataWithSeparator,
        selectedKind: "another.space.20",
        selectedStory: "b2",
        selectedHierarchy: ['another', 'space', '20'],
        sidebarAnimations: false
      }));
      wrap.setProps({
        selectedHierarchy: ['some', 'name', 'item1']
      });

      var _wrap$state4 = wrap.state(),
          nodes = _wrap$state4.nodes;

      expect(nodes).toEqual({
        'another@namespace': true,
        'another@space@namespace': true,
        'another@space@20@namespace': true,
        'some@namespace': true,
        'some@name@namespace': true,
        'some@name@item1@namespace': true
      });
    });
    test('should not call setState when selectedHierarchy prop changes with the same value', function () {
      var selectedHierarchy = ['another', 'space', '20'];
      var wrap = (0, _enzyme.mount)(_react.default.createElement(_index.default, {
        storiesHierarchy: dataWithSeparator,
        selectedKind: "another.space.20",
        selectedStory: "b2",
        selectedHierarchy: selectedHierarchy,
        sidebarAnimations: false
      }));
      var setState = jest.fn();
      wrap.instance().setState = setState;
      wrap.setProps({
        selectedHierarchy: selectedHierarchy
      });
      expect(setState).not.toHaveBeenCalled();
    });
    test('should render stories with with highlighting when storiesFilter is provided', function () {
      var filter = 'th';
      var selectedKind = 'another.space.20';
      var filteredData = (0, _filters.storyFilter)((0, _hierarchy.prepareStoriesForHierarchy)(initialData, '\\.'), filter, selectedKind);
      var filteredDataHierarchy = (0, _hierarchy.createHierarchies)(filteredData);
      var wrap = (0, _enzyme.mount)(_react.default.createElement(_index.default, {
        storiesHierarchy: filteredDataHierarchy[0],
        selectedKind: selectedKind,
        selectedStory: "b2",
        selectedHierarchy: ['another', 'space', '20'],
        storyFilter: filter,
        sidebarAnimations: false
      }));
      var highlightedElements = wrap.find('strong');
      expect(highlightedElements.text()).toBe('th');
    });
  });
  describe('events', function () {
    test('should not call the onSelectStory prop when a collapsed kind is clicked', function () {
      var onSelectStory = jest.fn();
      var wrap = (0, _enzyme.mount)(_react.default.createElement(_index.default, {
        storiesHierarchy: data,
        selectedKind: "b",
        selectedStory: "b2",
        selectedHierarchy: ['b'],
        onSelectStory: onSelectStory,
        sidebarAnimations: false
      }));
      var kind = wrap.find('[data-name="a"]').first();
      kind.simulate('click', leftClick);
      expect(onSelectStory).not.toHaveBeenCalled();
    });
    test("shouldn't call the onSelectStory prop when an expanded kind is clicked", function () {
      var onSelectStory = jest.fn();
      var wrap = (0, _enzyme.mount)(_react.default.createElement(_index.default, {
        storiesHierarchy: data,
        selectedKind: "b",
        selectedStory: "b2",
        selectedHierarchy: ['b'],
        onSelectStory: onSelectStory,
        sidebarAnimations: false
      }));
      var kind = wrap.find('[data-name="a"]').filterWhere(function (el) {
        return el.text() === 'a';
      }).last();
      kind.simulate('click');
      onSelectStory.mockClear();
      kind.simulate('click');
      expect(onSelectStory).not.toHaveBeenCalled();
    });
    test('should call the onSelectStory prop when a story is clicked', function () {
      var onSelectStory = jest.fn();
      var wrap = (0, _enzyme.mount)(_react.default.createElement(_index.default, {
        storiesHierarchy: data,
        selectedKind: "b",
        selectedStory: "b2",
        selectedHierarchy: ['b'],
        onSelectStory: onSelectStory,
        sidebarAnimations: false
      }));
      var kind = wrap.find('[data-name="b1"]').first();
      kind.simulate('click', leftClick);
      expect(onSelectStory).toHaveBeenCalledWith('b', 'b1');
    });
    test('should call the onSelectStory prop when a story is clicked - hierarchySeparator is defined', function () {
      var onSelectStory = jest.fn();
      var wrap = (0, _enzyme.mount)(_react.default.createElement(_index.default, {
        storiesHierarchy: dataWithSeparator,
        selectedKind: "some.name.item1",
        selectedStory: "a2",
        selectedHierarchy: ['some', 'name', 'item1'],
        onSelectStory: onSelectStory,
        sidebarAnimations: false
      }));
      wrap.find('[data-name="another"]').first().simulate('click', leftClick);
      wrap.find('[data-name="space"]').first().simulate('click', leftClick);
      wrap.find('[data-name="20"]').first().simulate('click', leftClick);
      expect(onSelectStory).not.toHaveBeenCalled();
      wrap.find('[data-name="b2"]').first().simulate('click', leftClick);
      expect(onSelectStory).toHaveBeenCalledWith('another.space.20', 'b2');
    });
    test('should call the onSelectStory prop when a story is selected with enter key', function () {
      var onSelectStory = jest.fn();
      var wrap = (0, _enzyme.mount)(_react.default.createElement(_index.default, {
        storiesHierarchy: dataWithSeparator,
        selectedKind: "some.name.item1",
        selectedStory: "a2",
        selectedHierarchy: ['some', 'name', 'item1'],
        onSelectStory: onSelectStory,
        sidebarAnimations: false
      }));
      wrap.find('[data-name="another"]').first().simulate('keyDown', {
        keyCode: 13
      });
      expect(onSelectStory).not.toHaveBeenCalled();
      wrap.find('[data-name="space"]').first().simulate('keyDown', {
        keyCode: 13
      }); // enter press on native link triggers click event

      wrap.find('[data-name="20"]').first().simulate('click', leftClick);
      wrap.find('[data-name="b2"]').first().simulate('click', leftClick);
      expect(onSelectStory).toHaveBeenCalledWith('another.space.20', 'b2');
    });
  });
});