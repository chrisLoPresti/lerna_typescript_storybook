"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es6.object.assign");

require("core-js/modules/es6.array.index-of");

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.array.filter");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.function.name");

require("core-js/modules/es6.array.reduce");

var _reactTreebeard = require("react-treebeard");

var _components = require("@storybook/components");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@emotion/core");

var _routed_link = require("../../../containers/routed_link");

var _menu_item = _interopRequireDefault(require("../../menu_item"));

var _tree_node_type = _interopRequireDefault(require("./tree_node_type"));

var _tree_decorators_utils = require("./tree_decorators_utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function noop() {}

function ToggleDecorator(_ref) {
  var style = _ref.style,
      theme = _ref.theme;
  var height = style.height,
      width = style.width,
      arrow = style.arrow;
  var treeArrow = theme.treeArrow;
  var baseStyles = treeArrow && treeArrow.base ? _objectSpread({}, style.base, treeArrow.base) : style.base;
  var wrapperStyles = treeArrow && treeArrow.wrapper ? _objectSpread({}, style.wrapper, treeArrow.wrapper) : style.wrapper;
  var chevronHeight = treeArrow && treeArrow.height ? treeArrow.height : height;
  var chevronWeight = treeArrow && treeArrow.width ? treeArrow.height : width;
  var arrowStyles = treeArrow && treeArrow.arrow ? _objectSpread({}, arrow, treeArrow.arrow) : arrow;
  return _react.default.createElement("div", {
    style: baseStyles
  }, _react.default.createElement("div", {
    style: wrapperStyles
  }, _react.default.createElement(_components.Icons.ChevronRight, {
    height: chevronHeight,
    width: chevronWeight,
    style: arrowStyles
  })));
}

ToggleDecorator.propTypes = {
  theme: _propTypes.default.shape({}),
  style: _propTypes.default.shape({
    width: _propTypes.default.number.isRequired,
    height: _propTypes.default.number.isRequired,
    arrow: _propTypes.default.object.isRequired
  }).isRequired
};
ToggleDecorator.defaultProps = {
  theme: {}
};

function ContainerDecorator(props) {
  var node = props.node,
      style = props.style,
      onClick = props.onClick,
      theme = props.theme;

  var container = style.container,
      restStyles = _objectWithoutProperties(style, ["container"]);

  if (node.root) {
    return null;
  }

  var containerStyle = container.reduce(function (acc, styles) {
    return _objectSpread({}, acc, styles);
  }, {});

  var innerContainer = _react.default.createElement(_reactTreebeard.decorators.Container, _extends({}, props, {
    style: restStyles,
    onClick: noop
  }));

  var containerStyles = _objectSpread({}, containerStyle, theme.treeMenuHeader);

  if (node.type !== _tree_node_type.default.STORY) {
    return _react.default.createElement(_menu_item.default, {
      style: containerStyles,
      onClick: onClick,
      "data-name": node.name
    }, innerContainer);
  }

  var overrideParams = {
    selectedKind: node.kind,
    selectedStory: node.story
  };
  return _react.default.createElement(_routed_link.MenuLink, {
    active: node.active || undefined,
    overrideParams: overrideParams,
    onClick: onClick,
    "data-name": node.name
  }, innerContainer);
}

ContainerDecorator.propTypes = {
  theme: _propTypes.default.shape({}),
  style: _propTypes.default.shape({
    container: _propTypes.default.array.isRequired
  }).isRequired,
  node: _propTypes.default.shape({
    root: _propTypes.default.bool,
    type: _propTypes.default.oneOf([_tree_node_type.default.NAMESPACE, _tree_node_type.default.STORY]).isRequired,
    name: _propTypes.default.string.isRequired,
    kind: _propTypes.default.string,
    story: _propTypes.default.string,
    active: _propTypes.default.bool
  }).isRequired,
  onClick: _propTypes.default.func.isRequired
};
ContainerDecorator.defaultProps = {
  theme: {}
};

function HeaderDecorator(props) {
  var style = props.style,
      node = props.node,
      theme = props.theme,
      restProps = _objectWithoutProperties(props, ["style", "node", "theme"]);

  var newStyle = style;

  if (node.type === _tree_node_type.default.STORY) {
    newStyle = _objectSpread({}, style, {
      title: null
    });
  }

  var name = (0, _tree_decorators_utils.highlightNode)(node, style, theme.highlightColor, 'black');

  var newNode = _objectSpread({}, node, {
    name: name
  });

  return _react.default.createElement(_reactTreebeard.decorators.Header, _extends({
    style: newStyle,
    node: newNode
  }, restProps));
}

HeaderDecorator.propTypes = {
  style: _propTypes.default.shape({
    title: _propTypes.default.object.isRequired,
    base: _propTypes.default.object.isRequired
  }).isRequired,
  node: _propTypes.default.shape({
    type: _propTypes.default.oneOf([_tree_node_type.default.NAMESPACE, _tree_node_type.default.STORY]),
    highlight: _propTypes.default.arrayOf(_propTypes.default.arrayOf(_propTypes.default.number))
  }).isRequired
};

var _default = _objectSpread({}, _reactTreebeard.decorators, {
  Header: (0, _core.withCSSContext)(function (props, _ref2) {
    var theme = _ref2.theme;
    return _react.default.createElement(HeaderDecorator, _extends({}, props, {
      theme: theme
    }));
  }),
  Container: (0, _core.withCSSContext)(function (props, _ref3) {
    var theme = _ref3.theme;
    return _react.default.createElement(ContainerDecorator, _extends({}, props, {
      theme: theme
    }));
  }),
  Toggle: (0, _core.withCSSContext)(function (props, _ref4) {
    var theme = _ref4.theme;
    return _react.default.createElement(ToggleDecorator, _extends({}, props, {
      theme: theme
    }));
  })
});

exports.default = _default;