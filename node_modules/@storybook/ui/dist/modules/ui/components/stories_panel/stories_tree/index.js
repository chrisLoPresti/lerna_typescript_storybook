"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es6.array.filter");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.array.from");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es6.date.to-string");

require("core-js/modules/es6.array.is-array");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.object.create");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/es6.array.map");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.function.name");

require("core-js/modules/es6.function.bind");

require("core-js/modules/es6.array.reduce");

var _reactTreebeard = require("react-treebeard");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _deepEqual = _interopRequireDefault(require("deep-equal"));

var _styled = _interopRequireDefault(require("@emotion/styled"));

var _tree_header = _interopRequireDefault(require("./tree_header"));

var _tree_node_type = _interopRequireDefault(require("./tree_node_type"));

var _tree_decorators = _interopRequireDefault(require("./tree_decorators"));

var _tree_style = _interopRequireDefault(require("./tree_style"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var namespaceSeparator = '@';

function createNodeKey(_ref) {
  var namespaces = _ref.namespaces,
      type = _ref.type;
  return _toConsumableArray(namespaces).concat([[type]]).join(namespaceSeparator);
}

function getSelectedNodes(selectedHierarchy) {
  return selectedHierarchy.reduce(function (nodes, namespace) {
    var node = {};
    node.type = _tree_node_type.default.NAMESPACE;

    if (!nodes.length) {
      node.namespaces = [namespace];
    } else {
      var lastNode = nodes[nodes.length - 1];
      node.namespaces = _toConsumableArray(lastNode.namespaces).concat([[namespace]]);
    }

    nodes.push(node);
    return nodes;
  }, []).reduce(function (nodesMap, node) {
    return _objectSpread({}, nodesMap, _defineProperty({}, createNodeKey(node), true));
  }, {});
}

var Wrapper =
/*#__PURE__*/
(0, _styled.default)("div", {
  target: "emockhz0"
})({
  paddingTop: 20
});

var Stories =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Stories, _React$Component);

  function Stories() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Stories);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Stories)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.onToggle = _this.onToggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    var selectedHierarchy = _this.props.selectedHierarchy;
    _this.state = {
      overriddenFilteredNodes: {},
      nodes: getSelectedNodes(selectedHierarchy)
    };
    return _this;
  }

  _createClass(Stories, [{
    key: "onToggle",
    value: function onToggle(node, toggled) {
      if (node.story) {
        this.fireOnKindAndStory(node.kind, node.story);
      }

      if (!node.namespaces) {
        return;
      }

      this.setState(function (prevState) {
        return {
          nodes: _objectSpread({}, prevState.nodes, _defineProperty({}, node.key, toggled)),
          overriddenFilteredNodes: _objectSpread({}, prevState.overriddenFilteredNodes, _defineProperty({}, node.key, !toggled))
        };
      });
    }
  }, {
    key: "fireOnKindAndStory",
    value: function fireOnKindAndStory(kind, story) {
      var onSelectStory = this.props.onSelectStory;
      if (onSelectStory) onSelectStory(kind, story);
    }
  }, {
    key: "mapStoriesHierarchy",
    value: function mapStoriesHierarchy(storiesHierarchy) {
      var _this2 = this;

      var treeModel = {
        namespaces: storiesHierarchy.namespaces,
        name: storiesHierarchy.name,
        highlight: storiesHierarchy.highlight,
        children: []
      };

      if (storiesHierarchy.stories && storiesHierarchy.stories.length) {
        var _this$props = this.props,
            selectedStory = _this$props.selectedStory,
            selectedKind = _this$props.selectedKind;
        storiesHierarchy.stories.map(function (story) {
          return {
            name: story.name,
            story: story.name,
            kind: storiesHierarchy.kind,
            active: selectedStory === story.name && selectedKind === storiesHierarchy.kind,
            type: _tree_node_type.default.STORY,
            highlight: story.highlight
          };
        }).forEach(function (story) {
          return treeModel.children.push(story);
        });
      }

      if (storiesHierarchy.isNamespace) {
        treeModel.type = _tree_node_type.default.NAMESPACE;

        if (storiesHierarchy.map.size > 0) {
          storiesHierarchy.map.forEach(function (childItem) {
            return treeModel.children.push(_this2.mapStoriesHierarchy(childItem));
          });
        }
      }

      treeModel.key = createNodeKey(treeModel);
      treeModel.toggled = this.isToggled(treeModel);
      return treeModel;
    }
  }, {
    key: "isToggled",
    value: function isToggled(treeModel) {
      var nodes = this.state.nodes;
      return nodes[treeModel.key] || this.isFilteredNode(treeModel.key);
    }
  }, {
    key: "isFilteredNode",
    value: function isFilteredNode(key) {
      var overriddenFilteredNodes = this.state.overriddenFilteredNodes;
      var storyFilter = this.props.storyFilter;
      return !storyFilter ? false : !overriddenFilteredNodes[key];
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          storiesHierarchy = _this$props2.storiesHierarchy,
          sidebarAnimations = _this$props2.sidebarAnimations;
      var data = this.mapStoriesHierarchy(storiesHierarchy);
      data.toggled = true;
      data.root = true;
      return _react.default.createElement(Wrapper, null, storiesHierarchy.name && _react.default.createElement(_tree_header.default, null, storiesHierarchy.name), _react.default.createElement(_reactTreebeard.Treebeard, {
        style: _tree_style.default,
        data: data,
        onToggle: this.onToggle,
        animations: sidebarAnimations ? undefined : false,
        decorators: _tree_decorators.default
      }));
    }
  }]);

  return Stories;
}(_react.default.Component);

Stories.getDerivedStateFromProps = function (nextProps, prevState) {
  var _nextProps$selectedHi = nextProps.selectedHierarchy,
      selectedHierarchy = _nextProps$selectedHi === void 0 ? [] : _nextProps$selectedHi,
      storyFilter = nextProps.storyFilter;
  var _prevState$prevSelect = prevState.prevSelectedHierarchy,
      prevSelectedHierarchy = _prevState$prevSelect === void 0 ? [] : _prevState$prevSelect,
      prevStoryFilter = prevState.prevStoryFilter;
  var shouldClearFilteredNodes = storyFilter !== prevStoryFilter;
  var selectedHierarchyChanged = !(0, _deepEqual.default)(selectedHierarchy, prevSelectedHierarchy);

  if (selectedHierarchyChanged || shouldClearFilteredNodes) {
    var selectedNodes = getSelectedNodes(selectedHierarchy);
    return {
      overriddenFilteredNodes: shouldClearFilteredNodes ? {} : prevState.overriddenFilteredNodes,
      nodes: _objectSpread({}, prevState.nodes, selectedNodes),
      prevSelectedHierarchy: selectedHierarchy,
      prevStoryFilter: storyFilter
    };
  }

  return null;
};

Stories.defaultProps = {
  onSelectStory: null,
  storiesHierarchy: null,
  storyFilter: null,
  sidebarAnimations: true
};
Stories.propTypes = {
  storyFilter: _propTypes.default.string,
  storiesHierarchy: _propTypes.default.shape({
    namespaces: _propTypes.default.arrayOf(_propTypes.default.string),
    name: _propTypes.default.string,
    map: _propTypes.default.object
  }),
  selectedHierarchy: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,
  selectedKind: _propTypes.default.string.isRequired,
  selectedStory: _propTypes.default.string.isRequired,
  onSelectStory: _propTypes.default.func,
  sidebarAnimations: _propTypes.default.bool
};
(0, _reactLifecyclesCompat.polyfill)(Stories);
var _default = Stories;
exports.default = _default;