"use strict";

require("core-js/modules/es6.array.find");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _components = require("@storybook/components");

var _index = _interopRequireDefault(require("./index"));

var _text_filter = _interopRequireDefault(require("./text_filter"));

var _stories_tree = _interopRequireDefault(require("./stories_tree"));

var _hierarchy = require("../../libs/hierarchy");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('manager.ui.components.stories_panel.index', function () {
  test('should render Header and TextFilter by default', function () {
    var openShortcutsHelp = jest.fn();
    var storyFilter = 'xxxxx';
    var wrap = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
      openShortcutsHelp: openShortcutsHelp,
      storyFilter: storyFilter
    }));
    var header = wrap.find(_components.Header).first();
    expect(header).toHaveProp('openShortcutsHelp', openShortcutsHelp);
    var textFilter = wrap.find(_text_filter.default).first();
    expect(textFilter).toHaveProp('text', storyFilter);
    expect(wrap.find(_stories_tree.default)).not.toExist();
  });
  test('should render stories only if storiesHierarchies prop exists', function () {
    var selectedKind = 'kk';
    var selectedStory = 'bb';
    var storiesHierarchies = (0, _hierarchy.createHierarchies)([{
      kind: 'kk',
      namespaces: ['kk'],
      stories: ['bb']
    }]);
    var wrap = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
      storiesHierarchies: storiesHierarchies,
      selectedKind: selectedKind,
      selectedStory: selectedStory,
      selectedHierarchy: ['kk']
    }));
    expect(wrap.find(_stories_tree.default)).toHaveLength(1);
    var element = wrap.find(_stories_tree.default).first();
    expect(element.props()).toMatchObject({
      storiesHierarchy: storiesHierarchies[0],
      selectedKind: selectedKind,
      selectedStory: selectedStory
    });
  });
  test('should render multiple stories if multiple storiesHierarchies exist', function () {
    var selectedKind = 'kk';
    var selectedStory = 'bb';
    var stories = [{
      kind: 'kk',
      namespaces: ['kk'],
      stories: ['bb'],
      rootName: 'a'
    }, {
      kind: 'kk',
      namespaces: ['kk'],
      stories: ['bb'],
      rootName: 'b'
    }];
    var storiesHierarchies = (0, _hierarchy.createHierarchies)(stories);
    var wrap = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
      storiesHierarchies: storiesHierarchies,
      selectedKind: selectedKind,
      selectedStory: selectedStory,
      selectedHierarchy: ['kk']
    }));
    expect(wrap.find(_stories_tree.default)).toHaveLength(2);
    var first = wrap.find(_stories_tree.default).first();
    expect(first.props()).toMatchObject({
      storiesHierarchy: storiesHierarchies[0],
      selectedKind: selectedKind,
      selectedStory: selectedStory
    });
    var second = wrap.find(_stories_tree.default).at(1);
    expect(second.props()).toMatchObject({
      storiesHierarchy: storiesHierarchies[1],
      selectedKind: selectedKind,
      selectedStory: selectedStory
    });
  });
  test('should not render stories if storiesHierarchy exists but is empty', function () {
    var storiesHierarchies = (0, _hierarchy.createHierarchies)([]);
    var wrap = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
      storiesHierarchies: storiesHierarchies
    }));
    expect(wrap.find(_stories_tree.default).exists()).toBe(false);
  });
  describe('onStoryFilter prop', function () {
    test('should set filter as an empty text on TextFilter.onClear', function () {
      var onStoryFilter = jest.fn();
      var wrap = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
        onStoryFilter: onStoryFilter
      }));
      var textFilter = wrap.find(_text_filter.default).first();
      textFilter.props().onClear();
      expect(onStoryFilter).toHaveBeenCalledWith('');
    });
    test('should set filter as the given text of TextFilter.onChange', function () {
      var onStoryFilter = jest.fn();
      var filterText = 'XXX';
      var wrap = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
        onStoryFilter: onStoryFilter
      }));
      var textFilter = wrap.find(_text_filter.default).first();
      textFilter.props().onChange(filterText);
      expect(onStoryFilter).toHaveBeenCalledWith(filterText);
    });
  });
});