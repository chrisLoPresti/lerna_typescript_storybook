"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jumpToStory = _jumpToStory;
exports.ensureKind = ensureKind;
exports.ensureStory = ensureStory;
exports.ensurePanel = ensurePanel;
exports.default = void 0;

require("core-js/modules/es6.array.filter");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.array.index-of");

require("core-js/modules/es6.array.map");

require("core-js/modules/es6.array.find");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.for-each");

var _pick = _interopRequireDefault(require("lodash/pick"));

var _defaultState = _interopRequireDefault(require("../defaultState"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _jumpToStory(storyKinds, selectedKind, selectedStory, direction) {
  var flatteredStories = [];
  var currentIndex = -1;
  storyKinds.forEach(function (_ref) {
    var kind = _ref.kind,
        stories = _ref.stories;
    stories.forEach(function (story) {
      flatteredStories.push({
        kind: kind,
        story: story
      });

      if (kind === selectedKind && story === selectedStory) {
        currentIndex = flatteredStories.length - 1;
      }
    });
  });
  var jumpedStory = flatteredStories[currentIndex + direction];

  if (!jumpedStory) {
    return {
      selectedKind: selectedKind,
      selectedStory: selectedStory
    };
  }

  return {
    selectedKind: jumpedStory.kind,
    selectedStory: jumpedStory.story
  };
}

function ensureKind(storyKinds, selectedKind) {
  if (!storyKinds) return selectedKind;
  var found = storyKinds.find(function (item) {
    return item.kind === selectedKind;
  });
  if (found) return found.kind; // if the selected kind is non-existant, select the first kind

  var kinds = storyKinds.map(function (item) {
    return item.kind;
  });
  return kinds[0];
}

function ensureStory(storyKinds, selectedKind, selectedStory) {
  if (!storyKinds) return selectedStory;
  var kindInfo = storyKinds.find(function (item) {
    return item.kind === selectedKind;
  });
  if (!kindInfo) return null;
  var found = kindInfo.stories.find(function (item) {
    return item === selectedStory;
  });
  if (found) return found; // if the selected story is non-existant, select the first story

  return kindInfo.stories[0];
}

function ensurePanel(panels, selectedPanel, currentPanel) {
  if (Object.keys(panels).indexOf(selectedPanel) >= 0) return selectedPanel; // if the selected panel is non-existant, select the current panel
  // and output to console all available panels

  var logger = console;
  logger.group('Available Panels ID:');
  Object.keys(panels).forEach(function (panelID) {
    return logger.log("".concat(panelID, " (").concat(panels[panelID].title, ")"));
  });
  logger.groupEnd('Available Panels ID:');
  return currentPanel;
}

var _default = {
  setStories: function setStories(_ref2, stories) {
    var clientStore = _ref2.clientStore;
    clientStore.update(function (state) {
      var selectedKind = ensureKind(stories, state.selectedKind);
      var currentSelectedStory = selectedKind === state.selectedKind ? state.selectedStory : null;
      var selectedStory = ensureStory(stories, selectedKind, currentSelectedStory);
      return {
        stories: stories,
        selectedStory: selectedStory,
        selectedKind: selectedKind
      };
    });
  },
  selectStory: function selectStory(_ref3, kind, story) {
    var clientStore = _ref3.clientStore;
    clientStore.update(function (state) {
      var selectedKind = ensureKind(state.stories, kind);
      var selectedStory = ensureStory(state.stories, selectedKind, story);
      return {
        selectedKind: selectedKind,
        selectedStory: selectedStory
      };
    });
  },
  selectInCurrentKind: function selectInCurrentKind(_ref4, story) {
    var clientStore = _ref4.clientStore;
    clientStore.update(function (state) {
      var selectedStory = ensureStory(state.stories, state.selectedKind, story);
      return {
        selectedStory: selectedStory
      };
    });
  },
  jumpToStory: function jumpToStory(_ref5, direction) {
    var clientStore = _ref5.clientStore;
    clientStore.update(function (state) {
      return _jumpToStory(state.stories, state.selectedKind, state.selectedStory, direction);
    });
  },
  setOptions: function setOptions(env, options) {
    var clientStore = env.clientStore,
        provider = env.provider;
    clientStore.update(function (state) {
      var newOptions = (0, _pick.default)(options, Object.keys(_defaultState.default.uiOptions));

      var updatedUiOptions = _objectSpread({}, _defaultState.default.uiOptions, newOptions);

      var otherOptions = {};

      if (Object.keys((0, _pick.default)(options, ['selectedAddonPanel'])).length) {
        otherOptions.selectedAddonPanel = ensurePanel(provider.getPanels(), options.selectedAddonPanel, state.selectedAddonPanel);
      }

      return _objectSpread({
        uiOptions: updatedUiOptions
      }, otherOptions);
    });
  },
  setQueryParams: function setQueryParams(_ref6, customQueryParams) {
    var clientStore = _ref6.clientStore;
    clientStore.update(function (state) {
      var updatedQueryParams = _objectSpread({}, state.customQueryParams, customQueryParams);

      Object.keys(customQueryParams).forEach(function (key) {
        if (updatedQueryParams[key] === null) {
          delete updatedQueryParams[key];
        }
      });
      return {
        customQueryParams: updatedQueryParams
      };
    });
  }
};
exports.default = _default;