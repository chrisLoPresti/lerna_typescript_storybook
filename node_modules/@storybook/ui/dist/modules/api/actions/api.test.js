"use strict";

require("core-js/modules/es6.object.define-property");

var _api = _interopRequireDefault(require("./api"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MockClientStore =
/*#__PURE__*/
function () {
  function MockClientStore() {
    _classCallCheck(this, MockClientStore);
  }

  _createClass(MockClientStore, [{
    key: "update",
    value: function update(cb) {
      this.updateCallback = cb;
    }
  }]);

  return MockClientStore;
}();

var stories = [{
  kind: 'abc',
  stories: ['a', 'b', 'c']
}, {
  kind: 'bbc',
  stories: ['x', 'y', 'z']
}];
describe('manager.api.actions.api', function () {
  describe('setStories', function () {
    describe('no selected story', function () {
      it('should set stories and select the first story', function () {
        var clientStore = new MockClientStore();

        _api.default.setStories({
          clientStore: clientStore
        }, stories);

        var newState = clientStore.updateCallback({});
        expect(newState).toEqual({
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'a'
        });
      });
    });
    describe('has a selected story', function () {
      it('should set stories and select the existing story', function () {
        var clientStore = new MockClientStore();

        _api.default.setStories({
          clientStore: clientStore
        }, stories);

        var state = {
          selectedKind: 'abc',
          selectedStory: 'c'
        };
        var newState = clientStore.updateCallback(state);
        expect(newState).toEqual({
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'c'
        });
      });
    });
    describe('has a selected story, but it is story is not in new stories', function () {
      it('should set stories and select the first story of the selected kind', function () {
        var clientStore = new MockClientStore();

        _api.default.setStories({
          clientStore: clientStore
        }, stories);

        var state = {
          selectedKind: 'bbc',
          selectedStory: 'k'
        };
        var newState = clientStore.updateCallback(state);
        expect(newState).toEqual({
          stories: stories,
          selectedKind: 'bbc',
          selectedStory: 'x'
        });
      });
    });
    describe('has a selected story, but it is kind is not in new stories', function () {
      it('should set stories and select the first story', function () {
        var clientStore = new MockClientStore();

        _api.default.setStories({
          clientStore: clientStore
        }, stories);

        var state = {
          selectedKind: 'kky',
          selectedStory: 'c'
        };
        var newState = clientStore.updateCallback(state);
        expect(newState).toEqual({
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'a'
        });
      });
    });
  });
  describe('selectStory', function () {
    describe('with both kind and story', function () {
      it('should select the correct story', function () {
        var clientStore = new MockClientStore();

        _api.default.selectStory({
          clientStore: clientStore
        }, 'bbc', 'y');

        var state = {
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'c'
        };
        var stateUpdates = clientStore.updateCallback(state);
        expect(stateUpdates).toEqual({
          selectedKind: 'bbc',
          selectedStory: 'y'
        });
      });
    });
    describe('with just the kind', function () {
      it('should select the first of the kind', function () {
        var clientStore = new MockClientStore();

        _api.default.selectStory({
          clientStore: clientStore
        }, 'bbc');

        var state = {
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'c'
        };
        var stateUpdates = clientStore.updateCallback(state);
        expect(stateUpdates).toEqual({
          selectedKind: 'bbc',
          selectedStory: 'x'
        });
      });
    });
  });
  describe('selectInCurrentKind', function () {
    it('should select the correct story', function () {
      var clientStore = new MockClientStore();

      _api.default.selectInCurrentKind({
        clientStore: clientStore
      }, 'y');

      var state = {
        stories: stories,
        selectedKind: 'bbc',
        selectedStory: 'z'
      };
      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates).toEqual({
        selectedStory: 'y'
      });
    });
    it("should select the first story if there's no such story", function () {
      var clientStore = new MockClientStore();

      _api.default.selectInCurrentKind({
        clientStore: clientStore
      }, 'y');

      var state = {
        stories: stories,
        selectedKind: 'abc',
        selectedStory: 'c'
      };
      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates).toEqual({
        selectedStory: 'a'
      });
    });
  });
  describe('jumpToStory', function () {
    describe('has enough stories', function () {
      it('should select the next story', function () {
        var clientStore = new MockClientStore();

        _api.default.jumpToStory({
          clientStore: clientStore
        }, 1); // eslint-disable-line


        var state = {
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'c'
        };
        var stateUpdates = clientStore.updateCallback(state);
        expect(stateUpdates).toEqual({
          selectedKind: 'bbc',
          selectedStory: 'x'
        });
      });
      it('should select the prev story', function () {
        var clientStore = new MockClientStore();

        _api.default.jumpToStory({
          clientStore: clientStore
        }, -1); // eslint-disable-line


        var state = {
          stories: stories,
          selectedKind: 'abc',
          selectedStory: 'c'
        };
        var stateUpdates = clientStore.updateCallback(state);
        expect(stateUpdates).toEqual({
          selectedKind: 'abc',
          selectedStory: 'b'
        });
      });
    });
    describe('has not enough stories', function () {
      it('should select the current story', function () {
        var clientStore = new MockClientStore();

        _api.default.jumpToStory({
          clientStore: clientStore
        }, 1); // eslint-disable-line


        var state = {
          stories: stories,
          selectedKind: 'bbc',
          selectedStory: 'z'
        };
        var stateUpdates = clientStore.updateCallback(state);
        expect(stateUpdates).toEqual({
          selectedKind: 'bbc',
          selectedStory: 'z'
        });
      });
    });
  });
  describe('setOptions', function () {
    it('should update options', function () {
      var clientStore = new MockClientStore();

      _api.default.setOptions({
        clientStore: clientStore
      }, {
        name: 'test'
      });

      var stateUpdates = clientStore.updateCallback({});
      expect(stateUpdates.uiOptions).toMatchObject({
        name: 'test'
      });
    });
    var provider = {
      getPanels: function getPanels() {
        return {
          'storybook/actions/actions-panel': {
            title: 'Action logger'
          },
          'storybooks/storybook-addon-knobs': {
            title: 'Knobs'
          }
        };
      }
    };
    it('should update selectedAddonPanel', function () {
      var clientStore = new MockClientStore();

      _api.default.setOptions({
        clientStore: clientStore,
        provider: provider
      }, {
        selectedAddonPanel: 'storybooks/storybook-addon-knobs'
      });

      var state = {
        uiOptions: {},
        selectedAddonPanel: 'storybook/actions/actions-panel'
      };
      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates.selectedAddonPanel).toEqual('storybooks/storybook-addon-knobs');
    });
    it('should keep current addonPanel and output panel IDs', function () {
      var clientStore = new MockClientStore();

      _api.default.setOptions({
        clientStore: clientStore,
        provider: provider
      }, {
        selectedAddonPanel: null
      });

      global.console = {
        log: jest.fn(),
        group: jest.fn(),
        groupEnd: jest.fn()
      };
      var logger = console;
      var state = {
        uiOptions: {},
        selectedAddonPanel: 'storybook/actions/actions-panel'
      };
      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates.selectedAddonPanel).toEqual('storybook/actions/actions-panel');
      expect(logger.log.mock.calls).toEqual([['storybook/actions/actions-panel (Action logger)'], ['storybooks/storybook-addon-knobs (Knobs)']]);
    });
    it('should only update options for the key already defined', function () {
      var clientStore = new MockClientStore();

      _api.default.setOptions({
        clientStore: clientStore
      }, {
        name: 'test',
        random: 'value'
      });

      var stateUpdates = clientStore.updateCallback({});
      expect(stateUpdates.uiOptions).toMatchObject({
        name: 'test'
      });
    });
  });
  describe('setQueryParams', function () {
    it('shodul update query params', function () {
      var clientStore = new MockClientStore();

      _api.default.setQueryParams({
        clientStore: clientStore
      }, {
        abc: 'aaa',
        cnn: 'ccc'
      });

      var state = {
        customQueryParams: {
          bbc: 'bbb',
          abc: 'sshd'
        }
      };
      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates).toEqual({
        customQueryParams: {
          bbc: 'bbb',
          abc: 'aaa',
          cnn: 'ccc'
        }
      });
    });
    it('should delete the param if it is null', function () {
      var clientStore = new MockClientStore();

      _api.default.setQueryParams({
        clientStore: clientStore
      }, {
        abc: null,
        bbc: 'ccc'
      });

      var state = {
        customQueryParams: {
          bbc: 'bbb',
          abc: 'sshd'
        }
      };
      var stateUpdates = clientStore.updateCallback(state);
      expect(stateUpdates).toEqual({
        customQueryParams: {
          bbc: 'ccc'
        }
      });
    });
  });
});