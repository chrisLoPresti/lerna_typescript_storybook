"use strict";

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

var _init_api = _interopRequireDefault(require("./init_api"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

describe('manager.api.config.initApi', function () {
  it('should expose correct API methods', function (done) {
    var actions = {
      api: {
        setStories: jest.fn(),
        selectStory: jest.fn(),
        selectInCurrentKind: jest.fn(),
        setQueryParams: jest.fn()
      },
      shortcuts: {
        handleEvent: jest.fn()
      }
    };
    var clientStore = {
      subscribe: jest.fn()
    };
    var provider = {
      handleAPI: function handleAPI(api) {
        expect(api.setStories).toBe(actions.api.setStories);
        expect(api.selectStory).toBe(actions.api.selectStory);
        expect(api.selectInCurrentKind).toBe(actions.api.selectInCurrentKind);
        expect(api.handleShortcut).toBe(actions.shortcuts.handleEvent);
        expect(_typeof(api.onStory)).toBe('function');
        expect(_typeof(api.setQueryParams)).toBe('function');
        expect(_typeof(api.getUrlState)).toBe('function');
        done();
      }
    };
    (0, _init_api.default)(provider, clientStore, actions);
  });
  it('should trigger the onStory callback', function (done) {
    var actions = {
      api: {},
      shortcuts: {}
    };
    var selectedKind = 'XXdd';
    var selectedStory = 'u8sd';
    var clientStore = {
      subscribe: jest.fn(),
      getAll: function getAll() {
        return {
          selectedKind: selectedKind,
          selectedStory: selectedStory
        };
      }
    };
    var provider = {
      handleAPI: function handleAPI(api) {
        api.onStory(function (kind, story) {
          expect(kind).toBe(selectedKind);
          expect(story).toBe(selectedStory);
          done();
        });
      }
    };
    (0, _init_api.default)(provider, clientStore, actions); // calling the subscription

    clientStore.subscribe.mock.calls[0][0]();
  });
  it('should support to add multiple onStory callback', function (done) {
    var actions = {
      api: {},
      shortcuts: {}
    };
    var selectedKind = 'XXdd';
    var selectedStory = 'u8sd';
    var clientStore = {
      subscribe: jest.fn(),
      getAll: function getAll() {
        return {
          selectedKind: selectedKind,
          selectedStory: selectedStory
        };
      }
    };
    var provider = {
      handleAPI: function handleAPI(api) {
        var count = 0;
        api.onStory(function () {
          count += 1;
        });
        api.onStory(function () {
          count += 1;
          expect(count).toBe(2);
          done();
        });
      }
    };
    (0, _init_api.default)(provider, clientStore, actions); // calling the subscription

    clientStore.subscribe.mock.calls[0][0]();
  });
  it('should support a way to remove onStory callback', function (done) {
    var actions = {
      api: {},
      shortcuts: {}
    };
    var selectedKind = 'XXdd';
    var selectedStory = 'u8sd';
    var clientStore = {
      subscribe: jest.fn(),
      getAll: function getAll() {
        return {
          selectedKind: selectedKind,
          selectedStory: selectedStory
        };
      }
    };
    var provider = {
      handleAPI: function handleAPI(api) {
        var count = 0;
        var stop = api.onStory(function () {
          count += 1;
        });
        stop();
        api.onStory(function () {
          count += 1;
          expect(count).toBe(1);
          done();
        });
      }
    };
    (0, _init_api.default)(provider, clientStore, actions); // calling the subscription

    clientStore.subscribe.mock.calls[0][0]();
  });
  describe('getQueryParam', function () {
    it('should return the correct query param value', function (done) {
      var actions = {
        api: {},
        shortcuts: {}
      };
      var clientStore = {
        subscribe: jest.fn(),
        getAll: function getAll() {
          return {
            customQueryParams: {
              foo: 'foo value',
              bar: 'bar value'
            }
          };
        }
      };
      var provider = {
        handleAPI: function handleAPI(api) {
          var value = api.getQueryParam('foo');
          expect(value).toBe('foo value');
          done();
        }
      };
      (0, _init_api.default)(provider, clientStore, actions);
    });
  });
  describe('getUrlState', function () {
    it('should return the correct url state value', function (done) {
      var actions = {
        api: {},
        shortcuts: {}
      };
      var clientStore = {
        subscribe: jest.fn(),
        getAll: function getAll() {
          return {
            selectedKind: 'kind',
            selectedStory: 'story',
            shortcutOptions: {}
          };
        }
      };
      var provider = {
        handleAPI: function handleAPI(api) {
          var value = api.getUrlState({
            selectedStory: 'newStory'
          });
          expect(value).toMatchObject({
            selectedKind: 'kind',
            selectedStory: 'newStory'
          });
          expect(value.url).toMatch(/selectedKind=kind/);
          expect(value.url).toMatch(/selectedStory=newStory/);
          done();
        }
      };
      (0, _init_api.default)(provider, clientStore, actions);
    });
  });
});