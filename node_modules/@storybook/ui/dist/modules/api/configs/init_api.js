"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.array.filter");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.define-property");

var _eventemitter = _interopRequireDefault(require("eventemitter3"));

var _handle_routing = require("../../ui/configs/handle_routing");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _default(provider, clientStore, actions) {
  var callbacks = new _eventemitter.default();
  var currentKind;
  var currentStory;
  var providerApi = {
    onStory: function onStory(cb) {
      callbacks.on('story', cb);

      if (currentKind && currentStory) {
        // Using a setTimeout to call the callback to make sure it's
        // not called on current event-loop. When users add callbacks
        // they usually expect it to be called in a future event loop.
        setTimeout(function () {
          return cb(currentKind, currentStory);
        }, 0);
      }

      return function stopListening() {
        callbacks.removeListener('story', cb);
      };
    },
    setStories: actions.api.setStories,
    selectStory: actions.api.selectStory,
    selectInCurrentKind: actions.api.selectInCurrentKind,
    handleShortcut: actions.shortcuts.handleEvent,
    setQueryParams: actions.api.setQueryParams,
    setOptions: function setOptions() {
      var _actions$api, _actions$shortcuts;

      (_actions$api = actions.api).setOptions.apply(_actions$api, arguments);

      (_actions$shortcuts = actions.shortcuts).setOptions.apply(_actions$shortcuts, arguments);
    },
    getQueryParam: function getQueryParam(key) {
      var state = clientStore.getAll();

      if (state.customQueryParams) {
        return state.customQueryParams[key];
      }

      return undefined;
    },
    getUrlState: function getUrlState(overrideParams) {
      var state = clientStore.getAll();
      return (0, _handle_routing.getUrlState)(_objectSpread({}, state, overrideParams));
    }
  };
  provider.handleAPI(providerApi); // subscribe to redux store and trigger onStory's callback

  clientStore.subscribe(function () {
    var state = clientStore.getAll();
    if (!state.selectedKind) return;

    if (state.selectedKind === currentKind && state.selectedStory === currentStory) {
      // No change in the selected story so avoid emitting 'story'
      return;
    }

    currentKind = state.selectedKind;
    currentStory = state.selectedStory;
    callbacks.emit('story', state.selectedKind, state.selectedStory); // providerApi._onStoryCallback(api.selectedKind, api.selectedStory);
  });
}