"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.webpackValid = void 0;

var _path = _interopRequireDefault(require("path"));

var _express = require("express");

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackDevMiddleware = _interopRequireDefault(require("webpack-dev-middleware"));

var _webpackHotMiddleware = _interopRequireDefault(require("webpack-hot-middleware"));

var _middleware = require("./utils/middleware");

var _config = _interopRequireDefault(require("./config"));

var _managerConfig = _interopRequireDefault(require("./manager/manager-config"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let webpackResolve = () => {};

let webpackReject = () => {};

const dllPath = _path.default.join(__dirname, '../../dll');

const webpackValid = new Promise((resolve, reject) => {
  webpackResolve = resolve;
  webpackReject = reject;
});
exports.webpackValid = webpackValid;
const cache = {};

async function _default(options) {
  const configDir = _path.default.resolve(options.configDir);

  const outputDir = _path.default.resolve(options.outputDir || _path.default.join(__dirname, '..', 'public'));

  const configType = 'DEVELOPMENT';
  const startTime = process.hrtime();
  let managerTotalTime;
  let previewTotalTime;
  const managerPromise = (0, _managerConfig.default)({
    configType,
    outputDir,
    configDir,
    cache,
    corePresets: [require.resolve('./manager/manager-preset.js')]
  }).then(config => new Promise((resolve, reject) => {
    (0, _webpack.default)(config).watch({
      aggregateTimeout: 1,
      ignored: /node_modules/
    }, (err, stats) => {
      managerTotalTime = process.hrtime(startTime);

      if (err) {
        reject(err);
      } else if (stats.hasErrors()) {
        reject(stats);
      } else {
        resolve(stats);
      }
    });
  }));
  const iframeConfig = await (0, _config.default)(_objectSpread({
    configType,
    outputDir,
    cache,
    corePresets: [require.resolve('./preview/preview-preset.js')],
    overridePresets: [require.resolve('./preview/custom-webpack-preset.js')]
  }, options));
  const middlewareFn = (0, _middleware.getMiddleware)(configDir); // remove the leading '/'

  let {
    publicPath
  } = iframeConfig.output;

  if (publicPath[0] === '/') {
    publicPath = publicPath.slice(1);
  }

  const iframeCompiler = (0, _webpack.default)(iframeConfig);

  const devMiddlewareOptions = _objectSpread({
    publicPath: iframeConfig.output.publicPath,
    watchOptions: _objectSpread({
      aggregateTimeout: 1,
      ignored: /node_modules/
    }, iframeConfig.watchOptions || {}),
    // this actually causes 0 (regular) output from wdm & webpack
    logLevel: 'warn',
    clientLogLevel: 'warning',
    noInfo: true
  }, iframeConfig.devServer);

  const router = new _express.Router();
  const webpackDevMiddlewareInstance = (0, _webpackDevMiddleware.default)(iframeCompiler, devMiddlewareOptions);
  router.use(webpackDevMiddlewareInstance);
  router.use((0, _webpackHotMiddleware.default)(iframeCompiler)); // custom middleware

  middlewareFn(router);
  const previewPromise = new Promise((resolve, reject) => {
    webpackDevMiddlewareInstance.waitUntilValid(stats => {
      previewTotalTime = process.hrtime(startTime);

      if (!stats) {
        reject(new Error('no stats after building iframe'));
      } else if (stats.hasErrors()) {
        reject(stats);
      } else {
        resolve(stats);
      }
    });
  });
  Promise.all([managerPromise, previewPromise]).then(([managerStats, previewStats]) => {
    router.get('/', (request, response) => {
      response.set('Content-Type', 'text/html');
      response.sendFile(_path.default.join(`${outputDir}/index.html`));
    });
    router.get(/\/sb_dll\/(.+\.js)$/, (request, response) => {
      response.set('Content-Type', 'text/javascript');
      response.sendFile(_path.default.join(`${dllPath}/${request.params[0]}`));
    });
    router.get(/\/sb_dll\/(.+\.LICENCE)$/, (request, response) => {
      response.set('Content-Type', 'text/html');
      response.sendFile(_path.default.join(`${dllPath}/${request.params[0]}`));
    });
    router.get(/(.+\.js)$/, (request, response) => {
      response.set('Content-Type', 'text/javascript');
      response.sendFile(_path.default.join(`${outputDir}/${request.params[0]}`));
    });
    webpackResolve({
      previewStats,
      managerStats,
      managerTotalTime,
      previewTotalTime
    });
  }).catch(e => webpackReject(e));
  return router;
}