"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.defaultDecorateStory = void 0;

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.array.from");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es6.date.to-string");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.array.filter");

require("core-js/modules/es6.array.map");

require("core-js/modules/es6.array.is-array");

require("core-js/modules/es6.function.name");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.array.reduce");

var _clientLogger = require("@storybook/client-logger");

var _addons = _interopRequireDefault(require("@storybook/addons"));

var _coreEvents = _interopRequireDefault(require("@storybook/core-events"));

var _story_store = _interopRequireDefault(require("./story_store"));

var _subscriptions_store = _interopRequireDefault(require("./subscriptions_store"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultDecorateStory = function defaultDecorateStory(getStory, decorators) {
  return decorators.reduce(function (decorated, decorator) {
    return function (context) {
      return decorator(function () {
        return decorated(context);
      }, context);
    };
  }, getStory);
};

exports.defaultDecorateStory = defaultDecorateStory;

var metaSubscription = function metaSubscription() {
  _addons.default.getChannel().on(_coreEvents.default.REGISTER_SUBSCRIPTION, _subscriptions_store.default.register);

  return function () {
    return _addons.default.getChannel().removeListener(_coreEvents.default.REGISTER_SUBSCRIPTION, _subscriptions_store.default.register);
  };
};

var withSubscriptionTracking = function withSubscriptionTracking(storyFn) {
  if (!_addons.default.hasChannel()) return storyFn();

  _subscriptions_store.default.markAllAsUnused();

  _subscriptions_store.default.register(metaSubscription);

  var result = storyFn();

  _subscriptions_store.default.clearUnused();

  return result;
};

var ClientApi = function ClientApi() {
  var _this = this;

  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$storyStore = _ref.storyStore,
      storyStore = _ref$storyStore === void 0 ? new _story_store.default() : _ref$storyStore,
      _ref$decorateStory = _ref.decorateStory,
      decorateStory = _ref$decorateStory === void 0 ? defaultDecorateStory : _ref$decorateStory;

  _classCallCheck(this, ClientApi);

  _defineProperty(this, "setAddon", function (addon) {
    _this._addons = _objectSpread({}, _this._addons, addon);
  });

  _defineProperty(this, "addDecorator", function (decorator) {
    _this._globalDecorators.push(decorator);
  });

  _defineProperty(this, "addParameters", function (parameters) {
    _this._globalParameters = parameters;
  });

  _defineProperty(this, "clearDecorators", function () {
    _this._globalDecorators = [];
  });

  _defineProperty(this, "storiesOf", function (kind, m) {
    if (!kind && typeof kind !== 'string') {
      throw new Error('Invalid or missing kind provided for stories, should be a string');
    }

    if (!m) {
      _clientLogger.logger.warn("Missing 'module' parameter for story with a kind of '".concat(kind, "'. It will break your HMR"));
    }

    if (m && m.hot && m.hot.dispose) {
      m.hot.dispose(function () {
        _this._storyStore.removeStoryKind(kind);

        _this._storyStore.incrementRevision();
      });
    }

    var localDecorators = [];
    var localParameters = {};
    var api = {
      kind: kind
    }; // apply addons

    Object.keys(_this._addons).forEach(function (name) {
      var addon = _this._addons[name];

      api[name] = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        addon.apply(api, args);
        return api;
      };
    });

    api.add = function (storyName, getStory, parameters) {
      if (typeof storyName !== 'string') {
        throw new Error("Invalid or missing storyName provided for a \"".concat(kind, "\" story."));
      }

      if (_this._storyStore.hasStory(kind, storyName)) {
        _clientLogger.logger.warn("Story of \"".concat(kind, "\" named \"").concat(storyName, "\" already exists"));
      } // Wrap the getStory function with each decorator. The first
      // decorator will wrap the story function. The second will
      // wrap the first decorator and so on.


      var decorators = localDecorators.concat(_toConsumableArray(_this._globalDecorators), [withSubscriptionTracking]);
      var fileName = m ? m.id : null;
      var allParam = {
        fileName: fileName
      };
      [_this._globalParameters, localParameters, parameters].forEach(function (params) {
        if (params) {
          Object.keys(params).forEach(function (key) {
            if (Array.isArray(params[key])) {
              allParam[key] = params[key];
            } else if (_typeof(params[key]) === 'object') {
              allParam[key] = _objectSpread({}, allParam[key], params[key]);
            } else {
              allParam[key] = params[key];
            }
          });
        }
      }); // Add the fully decorated getStory function.

      _this._storyStore.addStory(kind, storyName, _this._decorateStory(getStory, decorators), allParam);

      return api;
    };

    api.addDecorator = function (decorator) {
      localDecorators.push(decorator);
      return api;
    };

    api.addParameters = function (parameters) {
      localParameters = _objectSpread({}, localParameters, parameters);
      return api;
    };

    return api;
  });

  _defineProperty(this, "getStorybook", function () {
    return _this._storyStore.getStoryKinds().map(function (kind) {
      var fileName = _this._storyStore.getStoryFileName(kind);

      var stories = _this._storyStore.getStories(kind).map(function (name) {
        var render = _this._storyStore.getStoryWithContext(kind, name);

        return {
          name: name,
          render: render
        };
      });

      return {
        kind: kind,
        fileName: fileName,
        stories: stories
      };
    });
  });

  this._storyStore = storyStore;
  this._addons = {};
  this._globalDecorators = [];
  this._globalParameters = {};
  this._decorateStory = decorateStory;
};

exports.default = ClientApi;