"use strict";

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.array.filter");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.define-property");

var _ = require(".");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('client-logger', function () {
  var initialConsole = _objectSpread({}, global.console);

  beforeEach(function () {
    global.console.log = jest.fn();
    global.console.warn = jest.fn();
    global.console.error = jest.fn();
  });
  afterAll(function () {
    global.console = initialConsole;
  });
  it('should have an info method that displays the message', function () {
    var message = 'information';

    _.logger.info(message);

    expect(global.console.log).toHaveBeenCalledWith(message);
  });
  it('should have a warning method that displays the message in yellow, with a trace', function () {
    var message = 'warning message';

    _.logger.warn(message);

    expect(global.console.warn).toHaveBeenCalledWith(message);
  });
  it('should have an error method that displays the message in red, with a trace', function () {
    var message = 'error message';

    _.logger.error(message);

    expect(global.console.error).toHaveBeenCalledWith(message);
  });
});