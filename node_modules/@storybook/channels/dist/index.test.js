"use strict";

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

var _ = _interopRequireDefault(require("."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

jest.useFakeTimers();
describe('Channel', function () {
  var transport = null;
  var channel = null;
  beforeEach(function () {
    transport = {
      setHandler: jest.fn(),
      send: jest.fn()
    };
    channel = new _.default({
      transport: transport
    });
  });
  describe('constructor', function () {
    it('should set the handler if handler is preset', function () {
      channel = new _.default({
        transport: transport
      });
      expect(transport.setHandler).toHaveBeenCalled();
    });
    it('should not try to set handler if handler is missing', function () {
      channel = new _.default();
      expect(channel._transport).not.toBeDefined();
    });
  });
  describe('method:addListener', function () {
    it('should call channel.on with args', function () {
      channel.on = jest.fn();
      channel.addListener(1, 2);
      expect(channel.on).toHaveBeenCalled();
      expect(channel.on).toHaveBeenCalledWith(1, 2);
    });
  });
  describe('method:emit', function () {
    it('should call transport.send', function () {
      var _channel;

      transport.send = jest.fn();
      var type = 'test-type';
      var args = [1, 2, 3];
      var expected = {
        type: type,
        args: args
      };

      (_channel = channel).emit.apply(_channel, [type].concat(args));

      expect(transport.send).toHaveBeenCalled();
      var event = transport.send.mock.calls[0][0];
      expect(_typeof(event.from)).toEqual('string');
      delete event.from;
      expect(event).toEqual(expected);
    });
    it('should call handle async option', function () {
      var _channel2;

      transport.send = jest.fn();
      var type = 'test-type';
      var args = [1, 2, 3];
      channel = new _.default({
        async: true,
        transport: transport
      });

      (_channel2 = channel).emit.apply(_channel2, [type].concat(args));

      expect(transport.send).not.toHaveBeenCalled();
      jest.runAllImmediates();
      expect(transport.send).toHaveBeenCalled();
    });
  });
  describe('method:eventNames', function () {
    it('should return an array of strings', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      var expected = ['type-1', 'type-2'];
      expect(channel.eventNames()).toEqual(expected);
    });
  });
  describe('method:listenerCount', function () {
    it('should return the correct count', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      expect(channel.listenerCount('type-1')).toEqual(1);
      expect(channel.listenerCount('type-2')).toEqual(2);
    });
  });
  describe('method:listeners', function () {
    it('should return an array of listeners', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      expect(channel.listeners('type-1')).toEqual([11]);
      expect(channel.listeners('type-2')).toEqual([21, 22]);
    });
  });
  describe('method:on', function () {
    it('should add event listeners', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      var expected = {
        'type-1': [11],
        'type-2': [21, 22]
      };
      expect(channel._listeners).toEqual(expected);
    });
    it('should call event listeners on event', function () {
      var received = [];
      channel.on('type-1', function (n) {
        return received.push(n);
      });

      channel._handleEvent({
        type: 'type-1',
        args: [11]
      });

      channel._handleEvent({
        type: 'type-1',
        args: [12]
      });

      expect(received).toEqual([11, 12]);
    });
  });
  describe('method:once', function () {
    it('should add event listeners', function () {
      channel.once('type-1', 11);
      channel.once('type-2', 21);
      channel.once('type-2', 22);
      expect(channel._listeners['type-1']).toHaveLength(1);
      expect(channel._listeners['type-2']).toHaveLength(2);
    });
    it('should call event listeners only once', function () {
      var received = [];
      channel.once('type-1', function (n) {
        return received.push(n);
      });

      channel._handleEvent({
        type: 'type-1',
        args: [11]
      });

      channel._handleEvent({
        type: 'type-1',
        args: [12]
      });

      expect(received).toEqual([11]);
    });
  });
  describe('method:addPeerListener', function () {
    it('should add event listeners', function () {
      channel.addPeerListener('type-1', function () {});
      channel.addPeerListener('type-2', function () {});
      channel.addPeerListener('type-2', function () {});
      expect(channel._listeners['type-1']).toHaveLength(1);
      expect(channel._listeners['type-2']).toHaveLength(2);
    });
    it('should call event listeners on event', function () {
      var received = [];
      channel.addPeerListener('type-1', function (n) {
        return received.push(n);
      });

      channel._handleEvent({
        type: 'type-1',
        args: [11]
      });

      channel._handleEvent({
        type: 'type-1',
        args: [12]
      });

      expect(received).toEqual([11, 12]);
    });
  });
  describe('method:prependListener', function () {
    it('should add event listeners', function () {
      channel.prependListener('type-1', 11);
      channel.prependListener('type-2', 21);
      channel.prependListener('type-2', 22);
      var expected = {
        'type-1': [11],
        'type-2': [22, 21]
      };
      expect(channel._listeners).toEqual(expected);
    });
  });
  describe('method:prependOnceListener', function () {
    it('should add event listeners', function () {
      channel.prependOnceListener('type-1', 11);
      channel.prependOnceListener('type-2', 21);
      channel.prependOnceListener('type-2', 22);
      expect(channel._listeners['type-1']).toHaveLength(1);
      expect(channel._listeners['type-2']).toHaveLength(2);
    });
    it('should call event listeners only once', function () {
      var received = [];
      channel.prependOnceListener('type-1', function (n) {
        return received.push(n);
      });

      channel._handleEvent({
        type: 'type-1',
        args: [11]
      });

      channel._handleEvent({
        type: 'type-1',
        args: [12]
      });

      expect(received).toEqual([11]);
    });
  });
  describe('method:removeAllListeners', function () {
    it('should remove all listeners', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      channel.removeAllListeners();
      expect(channel._listeners).toEqual({});
    });
    it('should remove all listeners for a type', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      channel.removeAllListeners('type-2');
      expect(channel._listeners).toEqual({
        'type-1': [11]
      });
    });
  });
  describe('method:removeListener', function () {
    it('should remove all listeners', function () {
      channel.on('type-1', 11);
      channel.on('type-2', 21);
      channel.on('type-2', 22);
      var expected = {
        'type-1': [11],
        'type-2': [21]
      };
      channel.removeListener('type-2', 22);
      expect(channel._listeners).toEqual(expected);
    });
  });
  describe('_miscellaneous', function () {
    it('should ignore if event came from own sender', function () {
      var received = [];
      channel.on('type-1', function (n) {
        return received.push(n);
      });

      channel._handleEvent({
        type: 'type-1',
        args: [11]
      });

      channel._handleEvent({
        type: 'type-1',
        args: [12],
        from: channel._sender
      });

      expect(received).toEqual([11]);
    });
    it('should not ignore peer event', function () {
      var received = [];
      channel.on('type-1', function (n) {
        return received.push(n);
      });

      channel._handleEvent({
        type: 'type-1',
        args: [11]
      });

      channel._handleEvent({
        type: 'type-1',
        args: [12]
      }, true);

      expect(received).toEqual([11, 12]);
    });
    it('should ignore if event handled by addPeerListener', function () {
      var received = [];
      channel.addPeerListener('type-1', function (n) {
        return received.push(n);
      });

      channel._handleEvent({
        type: 'type-1',
        args: [11],
        from: channel._sender
      });

      channel._handleEvent({
        type: 'type-1',
        args: [12],
        from: '_'
      });

      channel._handleEvent({
        type: 'type-1',
        args: [13]
      }, true);

      expect(received).toEqual([12]);
    });
  });
});