"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _craConfig = require("./cra-config");

var _mockRules = _interopRequireDefault(require("./__mocks__/mockRules"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

jest.mock('fs', () => ({
  realpathSync: jest.fn(),
  existsSync: () => true
}));
jest.mock('mini-css-extract-plugin', () => {});
const SCRIPT_PATH = '.bin/react-scripts';
describe('cra-config', () => {
  beforeEach(() => {
    _fs.default.realpathSync.mockImplementationOnce(() => '/test-project');
  });
  describe('when used with the default react-scripts package', () => {
    beforeEach(() => {
      _fs.default.realpathSync.mockImplementationOnce(path => path.replace(SCRIPT_PATH, `react-scripts/${SCRIPT_PATH}`));
    });
    it('should locate the react-scripts package', () => {
      expect((0, _craConfig.getReactScriptsPath)({
        noCache: true
      })).toEqual('/test-project/node_modules/react-scripts');
    });
  });
  describe('when used with a custom react-scripts package', () => {
    beforeEach(() => {
      _fs.default.realpathSync.mockImplementationOnce(path => path.replace(SCRIPT_PATH, `custom-react-scripts/${SCRIPT_PATH}`));
    });
    it('should locate the react-scripts package', () => {
      expect((0, _craConfig.getReactScriptsPath)({
        noCache: true
      })).toEqual('/test-project/node_modules/custom-react-scripts');
    });
  });
  describe('when used with TypeScript', () => {
    const rules = (0, _craConfig.getTypeScriptRules)(_mockRules.default, './.storybook');
    it('should return the correct config', () => {
      // Normalise the return, as we know our new rules object will be an array, whereas a string is expected.
      const rulesObject = _objectSpread({}, rules[0], {
        include: rules[0].include[0]
      });

      expect(rulesObject).toMatchObject(_mockRules.default[2].oneOf[1]);
    }); // Allows using TypeScript in the `.storybook` (or config) folder.

    it('should add the Storybook config directory to `include`', () => {
      expect(rules[0].include.findIndex(string => string.includes('.storybook'))).toEqual(1);
    });
  });
});