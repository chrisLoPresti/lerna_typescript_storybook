"use strict";
// This generates theme variables in the correct shape for the UI
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_1 = require("./base");
var animation_1 = require("./animation");
var syntax_1 = require("./modules/syntax");
var react_inspector_1 = require("react-inspector");
var polished_1 = require("polished");
var createColors = function (vars) { return ({
    // Changeable colors
    primary: vars.colorPrimary,
    secondary: vars.colorSecondary,
    tertiary: base_1.color.tertiary,
    ancillary: base_1.color.ancillary,
    // Complimentary
    orange: base_1.color.orange,
    gold: base_1.color.gold,
    green: base_1.color.green,
    seafoam: base_1.color.seafoam,
    purple: base_1.color.purple,
    ultraviolet: base_1.color.ultraviolet,
    // Monochrome
    lightest: base_1.color.lightest,
    lighter: base_1.color.lighter,
    light: base_1.color.light,
    mediumlight: base_1.color.mediumlight,
    medium: base_1.color.medium,
    mediumdark: base_1.color.mediumdark,
    dark: base_1.color.dark,
    darker: base_1.color.darker,
    darkest: base_1.color.darkest,
    // For borders
    border: base_1.color.border,
    // Status
    positive: base_1.color.positive,
    negative: base_1.color.negative,
    warning: base_1.color.warning,
    defaultText: vars.textColor || base_1.color.darkest,
    inverseText: vars.textInverseColor || base_1.color.lightest,
}); };
var lightSyntaxColors = {
    green1: '#008000',
    red1: '#A31515',
    red2: '#9a050f',
    red3: '#800000',
    red4: '#ff0000',
    gray1: '#393A34',
    cyan1: '#36acaa',
    cyan2: '#2B91AF',
    blue1: '#0000ff',
    blue2: '#00009f',
};
var darkSyntaxColors = {
    green1: '#7C7C7C',
    red1: '#92C379',
    red2: '#9a050f',
    red3: '#A8FF60',
    red4: '#96CBFE',
    gray1: '#EDEDED',
    cyan1: '#C6C5FE',
    cyan2: '#FFFFB6',
    blue1: '#B474DD',
    blue2: '#00009f',
};
exports.create = function (vars, rest) { return (__assign({ base: vars.base, color: createColors(vars), background: {
        app: vars.appBg || base_1.background.app,
        content: vars.appContentBg || base_1.color.lightest,
        hoverable: vars.base === 'light' ? 'rgba(0,0,0,.05)' : 'rgba(250,250,252,.1)' || base_1.background.hoverable,
        positive: base_1.background.positive,
        negative: base_1.background.negative,
        warning: base_1.background.warning,
    }, typography: {
        fonts: {
            base: vars.fontBase || base_1.typography.fonts.base,
            mono: vars.fontCode || base_1.typography.fonts.mono,
        },
        weight: base_1.typography.weight,
        size: base_1.typography.size,
    }, animation: animation_1.animation,
    easing: animation_1.easing, input: {
        border: vars.inputBorder || base_1.color.border,
        background: vars.inputBg || base_1.color.lightest,
        color: vars.inputTextColor || base_1.color.defaultText,
        borderRadius: vars.inputBorderRadius || vars.appBorderRadius || 4,
    }, 
    // UI
    layoutMargin: 10, appBorderColor: vars.appBorderColor || base_1.color.border, appBorderRadius: vars.appBorderRadius || 4, 
    // Toolbar default/active colors
    barTextColor: vars.barTextColor || base_1.color.mediumdark, barSelectedColor: vars.barSelectedColor || base_1.color.secondary, barBg: vars.barBg || base_1.color.lightest, 
    // Brand logo/text
    brand: {
        title: vars.brandTitle,
        url: vars.brandUrl,
        image: vars.brandImage,
    }, code: syntax_1.create({
        colors: vars.base === 'light' ? lightSyntaxColors : darkSyntaxColors,
        mono: vars.fontCode || base_1.typography.fonts.mono,
    }), 
    // Addon actions theme
    // API example https://github.com/xyc/react-inspector/blob/master/src/styles/themes/chromeLight.js
    addonActionsTheme: __assign({}, (vars.base === 'light' ? react_inspector_1.chromeLight : react_inspector_1.chromeDark), { BASE_FONT_FAMILY: vars.fontCode || base_1.typography.fonts.mono, BASE_FONT_SIZE: base_1.typography.size.s2 - 1, BASE_LINE_HEIGHT: '18px', BASE_BACKGROUND_COLOR: 'transparent', BASE_COLOR: vars.textColor || base_1.color.darkest, ARROW_COLOR: polished_1.opacify(0.2, vars.appBorderColor || base_1.color.border), ARROW_MARGIN_RIGHT: 4, ARROW_FONT_SIZE: 8, TREENODE_FONT_FAMILY: vars.fontCode || base_1.typography.fonts.mono, TREENODE_FONT_SIZE: base_1.typography.size.s2 - 1, TREENODE_LINE_HEIGHT: '18px', TREENODE_PADDING_LEFT: 12 }) }, (rest || {}))); };
