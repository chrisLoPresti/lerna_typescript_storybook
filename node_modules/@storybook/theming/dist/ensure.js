"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var client_logger_1 = require("@storybook/client-logger");
var deep_object_diff_1 = require("deep-object-diff");
var common_tags_1 = require("common-tags");
var lodash_mergewith_1 = __importDefault(require("lodash.mergewith"));
var lodash_isequal_1 = __importDefault(require("lodash.isequal"));
var light_1 = __importDefault(require("./themes/light"));
// merge with concatenating arrays, but no duplicates
var merge = function (a, b) {
    return lodash_mergewith_1.default({}, a, b, function (objValue, srcValue) {
        if (Array.isArray(srcValue) && Array.isArray(objValue)) {
            srcValue.forEach(function (s) {
                var existing = objValue.find(function (o) { return o === s || lodash_isequal_1.default(o, s); });
                if (!existing) {
                    objValue.push(s);
                }
            });
            return objValue;
        }
        if (Array.isArray(objValue)) {
            return objValue;
        }
        return undefined;
    });
};
exports.ensure = function (input) {
    if (!input) {
        return light_1.default;
    }
    else {
        var missing = deep_object_diff_1.deletedDiff(light_1.default, input);
        if (Object.keys(missing).length) {
            client_logger_1.logger.warn(common_tags_1.stripIndent(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n          Your theme is missing properties, you should update your theme!\n\n          theme-data missing:\n        "], ["\n          Your theme is missing properties, you should update your theme!\n\n          theme-data missing:\n        "]))), missing);
        }
        return merge(light_1.default, input);
    }
};
var templateObject_1;
