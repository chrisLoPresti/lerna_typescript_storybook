"use strict";

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.array.filter");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.define-property");

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _RoutedLink = _interopRequireDefault(require("./RoutedLink"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LEFT_BUTTON = 0;
var MIDDLE_BUTTON = 1;
var RIGHT_BUTTON = 2;

var createEvent = function createEvent(options) {
  return _objectSpread({
    button: LEFT_BUTTON,
    preventDefault: jest.fn()
  }, options);
};

var render = function render(props) {
  return (0, _enzyme.shallow)(_react.default.createElement(_RoutedLink.default, _objectSpread({
    children: 'Content'
  }, props)));
};

var setup = function setup(_ref) {
  var props = _ref.props,
      event = _ref.event;
  return {
    e: createEvent(event),
    result: render(props),
    onClick: props.onClick || jest.fn()
  };
};

describe('manager.ui.components.routed_link', function () {
  describe('render', function () {
    test('should render with onClick when provided', function () {
      var _setup = setup({
        props: {
          onClick: jest.fn()
        }
      }),
          result = _setup.result;

      expect(result).toMatchSnapshot();
    });
    test('should not render onClick when not provided', function () {
      var _setup2 = setup({
        props: {
          href: 'href',
          children: 'Content'
        }
      }),
          result = _setup2.result;

      expect(result).toMatchSnapshot();
    });
    test('should render other properties', function () {
      var _setup3 = setup({
        props: {
          href: 'href',
          title: 'title',
          target: '_blank',
          children: 'Other content'
        }
      }),
          result = _setup3.result;

      expect(result).toMatchSnapshot();
    });
  });
  describe('events', function () {
    test('should call onClick on a plain left click', function () {
      var _setup4 = setup({
        props: {
          onClick: jest.fn()
        },
        event: {
          button: LEFT_BUTTON
        }
      }),
          result = _setup4.result,
          onClick = _setup4.onClick,
          e = _setup4.e;

      result.simulate('click', e);
      expect(onClick).toHaveBeenCalledWith(e);
      expect(e.preventDefault).toHaveBeenCalled();
    });
    test("shouldn't call onClick on a middle click", function () {
      var _setup5 = setup({
        props: {
          onClick: jest.fn()
        },
        event: {
          button: MIDDLE_BUTTON
        }
      }),
          result = _setup5.result,
          onClick = _setup5.onClick,
          e = _setup5.e;

      result.simulate('click', e);
      expect(onClick).not.toHaveBeenCalled();
      expect(e.preventDefault).not.toHaveBeenCalled();
    });
    test("shouldn't call onClick on a right click", function () {
      var _setup6 = setup({
        props: {
          onClick: jest.fn()
        },
        event: {
          button: RIGHT_BUTTON
        }
      }),
          result = _setup6.result,
          onClick = _setup6.onClick,
          e = _setup6.e;

      result.simulate('click', e);
      expect(onClick).not.toHaveBeenCalled();
      expect(e.preventDefault).not.toHaveBeenCalled();
    });
    test("shouldn't call onClick on alt+click", function () {
      var _setup7 = setup({
        props: {
          onClick: jest.fn()
        },
        event: {
          altKey: true
        }
      }),
          result = _setup7.result,
          onClick = _setup7.onClick,
          e = _setup7.e;

      result.simulate('click', e);
      expect(onClick).not.toHaveBeenCalled();
      expect(e.preventDefault).not.toHaveBeenCalled();
    });
    test("shouldn't call onClick on ctrl+click", function () {
      var _setup8 = setup({
        props: {
          onClick: jest.fn()
        },
        event: {
          ctrlKey: true
        }
      }),
          result = _setup8.result,
          onClick = _setup8.onClick,
          e = _setup8.e;

      result.simulate('click', e);
      expect(onClick).not.toHaveBeenCalled();
      expect(e.preventDefault).not.toHaveBeenCalled();
    });
    test("shouldn't call onClick on cmd+click / win+click", function () {
      var _setup9 = setup({
        props: {
          onClick: jest.fn()
        },
        event: {
          metaKey: true
        }
      }),
          result = _setup9.result,
          onClick = _setup9.onClick,
          e = _setup9.e;

      result.simulate('click', e);
      expect(onClick).not.toHaveBeenCalled();
      expect(e.preventDefault).not.toHaveBeenCalled();
    });
    test("shouldn't call onClick on shift+click", function () {
      var _setup10 = setup({
        props: {
          onClick: jest.fn()
        },
        event: {
          shiftKey: true
        }
      }),
          result = _setup10.result,
          onClick = _setup10.onClick,
          e = _setup10.e;

      result.simulate('click', e);
      expect(onClick).not.toHaveBeenCalled();
      expect(e.preventDefault).not.toHaveBeenCalled();
    });
  });
});